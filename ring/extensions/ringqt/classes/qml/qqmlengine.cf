<class>
name: QQmlEngine
para: QObject *
</class>

void addImageProvider(QString providerId, QQmlImageProviderBase *provider)
void addImportPath(QString path)
void addPluginPath(QString path)
QUrl baseUrl(void)
void clearComponentCache(void)
QQmlImageProviderBase *imageProvider(QString providerId)
QStringList importPathList(void)
bool importPlugin(QString filePath, QString uri, QList<QQmlError> *errors)
QQmlIncubationController *incubationController(void)
QNetworkAccessManager *networkAccessManager(void)
QQmlNetworkAccessManagerFactory *networkAccessManagerFactory(void)
QString offlineStorageDatabaseFilePath(QString databaseName)
QString offlineStoragePath(void)
bool outputWarningsToStandardError(void)
QStringList pluginPathList(void)
void removeImageProvider(QString providerId)
QQmlContext *rootContext(void)
void setBaseUrl(QUrl url)
void setImportPathList(QStringList paths)
void setIncubationController(QQmlIncubationController *controller)
void setNetworkAccessManagerFactory(QQmlNetworkAccessManagerFactory *factory)
void setOfflineStoragePath(QString dir)
void setOutputWarningsToStandardError(bool enabled)
void setPluginPathList(QStringList paths)
void trimComponentCache(void)
void retranslate(void)
QQmlContext * contextForObject(QObject *object)
QQmlEngine::ObjectOwnership objectOwnership(QObject *object)
void setContextForObject(QObject *object, QQmlContext *context)
void setObjectOwnership(QObject *object, QQmlEngine::ObjectOwnership ownership)
