<class>
name: QApp
parent: QGuiApplication
nonew
</class>

<register>
void exec(void)
void quit(void)
void processEvents(void)
void styleWindows(void)
void styleWindowsVista(void)
void styleFusion(void)
void styleFusionBlack(void)
void styleFusionCustom(QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor,QColor)
void closeAllWindows(void)
Qt::KeyboardModifiers keyboardModifiers(void)
</register>

<code>

RING_FUNC(ring_QApp_quit)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->quit();
	exit(0);
}

RING_FUNC(ring_QApp_exec)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->exec();
}

RING_FUNC(ring_QApp_styleWindows)
{
	qApp->setStyle(QStyleFactory::create("windows"));
	qApp->setPalette(qApp->style()->standardPalette());
}

RING_FUNC(ring_QApp_styleWindowsVista)
{
	qApp->setStyle(QStyleFactory::create("windowsvista"));
	qApp->setPalette(qApp->style()->standardPalette());
}

RING_FUNC(ring_QApp_styleFusion)
{
	qApp->setStyle(QStyleFactory::create("fusion"));
	qApp->setPalette(qApp->style()->standardPalette());
}

RING_FUNC(ring_QApp_styleFusionBlack)
{
	qApp->setStyle(QStyleFactory::create("fusion"));
	QPalette palette;
	palette.setColor(QPalette::Window, QColor(53,53,53));
	palette.setColor(QPalette::WindowText, Qt::white);
	palette.setColor(QPalette::Base, QColor(15,15,15));
	palette.setColor(QPalette::AlternateBase, QColor(53,53,53));
	palette.setColor(QPalette::ToolTipBase, Qt::white);
	palette.setColor(QPalette::ToolTipText, Qt::white);
	palette.setColor(QPalette::Text, Qt::white);
	palette.setColor(QPalette::Button, QColor(53,53,53));
	palette.setColor(QPalette::ButtonText, Qt::white);
	palette.setColor(QPalette::BrightText, Qt::red);

	palette.setColor(QPalette::Highlight, QColor(142,45,197).lighter());
	palette.setColor(QPalette::HighlightedText, Qt::black);

	palette.setColor(QPalette::Disabled, QPalette::Text, Qt::darkGray);
	palette.setColor(QPalette::Disabled, QPalette::ButtonText, Qt::darkGray);

	qApp->setPalette(palette);
}

RING_FUNC(ring_QApp_styleFusionCustom)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 12 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( (! RING_API_ISPOINTER(1)) || (! RING_API_ISPOINTER(2)) || 
		(! RING_API_ISPOINTER(3)) || (! RING_API_ISPOINTER(4)) || 
		(! RING_API_ISPOINTER(5)) || (! RING_API_ISPOINTER(6)) ||
		(! RING_API_ISPOINTER(7)) || (! RING_API_ISPOINTER(8)) ||
		(! RING_API_ISPOINTER(9)) || (! RING_API_ISPOINTER(10)) ||
		(! RING_API_ISPOINTER(11)) || (! RING_API_ISPOINTER(12)) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	qApp->setStyle(QStyleFactory::create("fusion"));
	QPalette palette;
	palette.setColor(QPalette::Window, 		* (QColor *) RING_API_GETCPOINTER(1,"QColor") );
	palette.setColor(QPalette::WindowText, 		* (QColor *) RING_API_GETCPOINTER(2,"QColor") );
	palette.setColor(QPalette::Base, 		* (QColor *) RING_API_GETCPOINTER(3,"QColor") );
	palette.setColor(QPalette::AlternateBase, 	* (QColor *) RING_API_GETCPOINTER(4,"QColor") );
	palette.setColor(QPalette::ToolTipBase, 	* (QColor *) RING_API_GETCPOINTER(5,"QColor") );
	palette.setColor(QPalette::ToolTipText, 	* (QColor *) RING_API_GETCPOINTER(6,"QColor") );
	palette.setColor(QPalette::Text,		* (QColor *) RING_API_GETCPOINTER(7,"QColor") );
	palette.setColor(QPalette::Button, 		* (QColor *) RING_API_GETCPOINTER(8,"QColor") );
	palette.setColor(QPalette::ButtonText, 		* (QColor *) RING_API_GETCPOINTER(9,"QColor") );
	palette.setColor(QPalette::BrightText, 		* (QColor *) RING_API_GETCPOINTER(10,"QColor") );
	palette.setColor(QPalette::Highlight, 		* (QColor *) RING_API_GETCPOINTER(11,"QColor") );
	palette.setColor(QPalette::HighlightedText, 	* (QColor *) RING_API_GETCPOINTER(12,"QColor") );
	qApp->setPalette(palette);
}


RING_FUNC(ring_QApp_processEvents)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->processEvents();
}

RING_FUNC(ring_QApp_closeAllWindows)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	qApp->closeAllWindows();
}

RING_FUNC(ring_QApp_keyboardModifiers)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	RING_API_RETNUMBER( (double) qApp->keyboardModifiers() );
}

</code>
