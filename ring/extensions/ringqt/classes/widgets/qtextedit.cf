<class>
name: QTextEdit
para: QWidget *
parent: QAbstractScrollArea
codename: GTextEdit
passvmpointer
</class>

bool acceptRichText(void)
int alignment(void)
QString anchorAt(QPoint)
bool canPaste(void)
QTextCharFormat currentCharFormat(void)
QFont currentFont(void)
QTextCursor cursorForPosition(QPoint)
QRect cursorRect(void)
int cursorWidth(void)
QTextDocument *document(void)
QString documentTitle(void)
void ensureCursorVisible(void)
bool find(QString, QTextDocument::FindFlag)
QString fontFamily(void)
bool fontItalic(void)
double fontPointSize(void)
bool fontUnderline(void)
int fontWeight(void)
bool isReadOnly(void)
bool isUndoRedoEnabled(void)
int lineWrapColumnOrWidth(void)
QVariant loadResource(int, QUrl)
void mergeCurrentCharFormat(QTextCharFormat)
void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)
bool overwriteMode(void) 

<filter> sysget("RINGQT_NOPRINTSUPPORT") = ""
void print(QPrinter * printer)  
</filter>

void setAcceptRichText(bool accept)
void setCurrentCharFormat(QTextCharFormat)
void setCursorWidth(int width)
void setDocument(QTextDocument *document)
void setDocumentTitle(QString)
void setLineWrapColumnOrWidth(int w)
void setLineWrapMode(QTextEdit::LineWrapMode)
void setOverwriteMode(bool overwrite)
void setReadOnly(bool)
void setTabChangesFocus(bool)
void setTabStopWidth(int width)
void setTextCursor(QTextCursor)
void setTextInteractionFlags(Qt::TextInteractionFlag flags)
void setUndoRedoEnabled(bool enable)
void setWordWrapMode(QTextOption::WrapMode policy)
bool tabChangesFocus(void)  
int tabStopWidth(void)  
QColor textBackgroundColor(void)  
QColor textColor(void)  
QTextCursor textCursor(void)  
int textInteractionFlags(void)  
QString toHtml(void)  
QString toPlainText(void)  
int wordWrapMode(void) 

void append(QString)
void clear(void)
void copy(void)
void cut(void)
void insertHtml(QString)
void insertPlainText(QString)
void paste(void)
void redo(void)
void scrollToAnchor(QString)
void selectAll(void)
void setAlignment(Qt::AlignmentFlag a)
void setCurrentFont(QFont)
void setFontFamily(QString)
void setFontItalic(bool italic)
void setFontPointSize(double s)
void setFontUnderline(bool underline)
void setFontWeight(int weight)
void setHtml(QString)
void setPlainText(QString)
void setText(QString)
void setTextBackgroundColor(QColor)
void setTextColor(QColor)
void undo(void)
void zoomIn(int range)
void zoomOut(int range)

void setcopyAvailableEvent(const char *)
void setcurrentCharFormatChangedEvent(const char *)
void setcursorPositionChangedEvent(const char *)
void setredoAvailableEvent(const char *)
void setselectionChangedEvent(const char *)
void settextChangedEvent(const char *)
void setundoAvailableEvent(const char *)

const char *getcopyAvailableEvent(void)
const char *getcurrentCharFormatChangedEvent(void)
const char *getcursorPositionChangedEvent(void)
const char *getredoAvailableEvent(void)
const char *getselectionChangedEvent(void)
const char *gettextChangedEvent(void)
const char *getundoAvailableEvent(void)


<register>
void cyanline(void)
</register>

<code>
RING_FUNC(ring_QTextEdit_cyanline)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QTextEdit *editor;
	editor = (QTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( Qt::cyan );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>


<register>
void setactivelinecolor(QColor)
</register>

<code>
RING_FUNC(ring_QTextEdit_setactivelinecolor)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QTextEdit *editor;
	editor = (QTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( * (QColor *) RING_API_GETCPOINTER(2,"QColor") );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>
