<class>
name: QImage
para: void
</class>

bool allGray(void)
int bitPlaneCount(void)
uchar *bits(void)
int byteCount(void)
int bytesPerLine(void)
qint64 cacheKey(void)
QRgb color(int i)
int colorCount(void)
const uchar *constBits(void)
const uchar *constScanLine(int i)
QImage convertToFormat(QImage::Format format, Qt::ImageConversionFlags flags)
QImage copy(int x, int y, int width, int height)
QImage createAlphaMask(Qt::ImageConversionFlags flags)
QImage createHeuristicMask(bool clipTight)
QImage createMaskFromColor(QRgb color, Qt::MaskMode mode)
int depth(void)
int dotsPerMeterX(void)
int dotsPerMeterY(void)
void fill(QColor)
QImage::Format format(void)
bool hasAlphaChannel(void)
int height(void)
void invertPixels(QImage::InvertMode mode)
bool isGrayscale(void)
bool isNull(void)
bool load(QString, const char *format) # In RingQt use : bool loadimage(QString, const char *format)
bool loadFromData(QByteArray, const char * format)
QImage mirrored(bool horizontal, bool vertical)
QPoint offset(void)
QRgb pixel(int x, int y)
int pixelIndex(int x, int y)
QRect rect(void)
QImage rgbSwapped(void)
bool save(QString, const char * format, int quality)
QImage scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode)
QImage scaledToHeight(int height, Qt::TransformationMode mode )
QImage scaledToWidth(int width, Qt::TransformationMode mode)
uchar *scanLine(int i)
void setColor(int index, QRgb colorValue)
void setColorCount(int colorCount)
void setDotsPerMeterX(int x)
void setDotsPerMeterY(int y)
void setOffset(QPoint)
void setPixel(int x, int y, uint index_or_rgb)
void setText(QString,QString)
QSize size(void)
void swap(QImage)
QString text(QString)
QStringList textKeys(void)
QImage transformed(QMatrix, Qt::TransformationMode mode)
bool valid(int x, int y)
int width(void)

