<nodllstartup>
<ignorecpointertype> 

<code>

#define _WINDOWS 1

#include "inet/inet.h"
#include "osapp/osmain.h"
#include "osgui/osgui.h"
#include "nappgui.h"

#define String RingString
#include "ring.h"

VM *pVM;

List *pEventsList;

Event *pEvent;

void *i_create(void)
{
	ring_vm_runcode(pVM,"create_gui()");
	return NULL;
}

void i_destroy(void **app)
{
	return;
}

void i_OnEvent(void *app, Event *e)
{
	pEvent = e;
	ring_vm_runcode(pVM,(char *) app);
}

</code>

<comment>
We don't use osmain() because it's a macro that generate the main() function
</comment>

<register>
void osmain(void)
void create_event(const char *cEvent)
void clean_events(void)
Event *event_object(void)
</register>

<code>

RING_FUNC(ring_osmain) {

	pVM = (VM *) pPointer;
	pEventsList = ring_list_new(0);
	pEvent = NULL;

	osmain_imp(pVM->pRingState->nArgc,pVM->pRingState->pArgv,
		   NULL,0,i_create,NULL,i_destroy,NULL);

}

RING_FUNC(ring_create_event) {

	Listener *pListener;
	char *cEvent;

	// Check parameters count
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_MISS1PARA);
		return ;
	}
	// Check parameters type
	if ( ! RING_API_ISSTRING(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	// Check string size
	cEvent = RING_API_GETSTRING(1);
	if ( RING_API_GETSTRINGSIZE(1) > 255 ) {
		RING_API_ERROR("The event code must be <= 255 characters");
		return;
	}

	ring_list_addstring(pEventsList,cEvent);
	void *object = (void *) ring_list_getstring(pEventsList,ring_list_getsize(pEventsList));

	pListener = listener_imp(object, (FPtr_event_handler) i_OnEvent);
	RING_API_RETCPOINTER(pListener,"Listener *");
}

RING_FUNC(ring_clean_events) {
	if (pEventsList == NULL) return ;
	pEventsList = ring_list_delete(pEventsList);
}

RING_FUNC(ring_event_object) {
	if (pEvent == NULL) return ;
	RING_API_RETCPOINTER(pEvent,"Event *");
}

</code>

<runcode>
aNumberTypes + "unsigned int"
aNumberTypes + "float"
aNumberTypes + "uint8_t"
aNumberTypes + "const uint8_t"
aNumberTypes + "uint16_t"
aNumberTypes + "const uint16_t"
aNumberTypes + "uint32_t"
aNumberTypes + "const uint32_t"
aNumberTypes + "uint64_t"
aNumberTypes + "const uint64_t"
aNumberTypes + "int8_t"
aNumberTypes + "const int8_t"
aNumberTypes + "int16_t"
aNumberTypes + "const int16_t"
aNumberTypes + "int32_t"
aNumberTypes + "const int32_t"
aNumberTypes + "int64_t"
aNumberTypes + "const int64_t"
aNumberTypes + "bool_t"
aNumberTypes + "const bool_t"
aNumberTypes + "real32_t"
aNumberTypes + "const real32_t"
aNumberTypes + "real64_t"
aNumberTypes + "const real64_t"

aStringTypes + "char_t *"
aStringTypes + "const char_t *"
aStringTypes + "byte_t *"
aStringTypes + "const byte_t *"

</runcode>

<constant>
ekGUI_HORIZONTAL
ekGUI_VERTICAL
ekGUI_OFF
ekGUI_ON
ekGUI_MIXED
ekGUI_MOUSE_LEFT
ekGUI_MOUSE_RIGHT
ekGUI_MOUSE_MIDDLE
ekGUI_CURSOR_ARROW
ekGUI_CURSOR_HAND
ekGUI_CURSOR_IBEAM
ekGUI_CURSOR_CROSS
ekGUI_CURSOR_SIZEWE
ekGUI_CURSOR_SIZENS
ekGUI_CURSOR_USER
ekGUI_CLOSE_ESC
ekGUI_CLOSE_INTRO
ekGUI_CLOSE_BUTTON
ekGUI_CLOSE_DEACT
ekGUI_SCALE_AUTO
ekGUI_SCALE_NONE
ekGUI_SCALE_ASPECT
ekGUI_SCALE_ASPECTDW
ekGUI_SCROLL_BEGIN
ekGUI_SCROLL_END
ekGUI_SCROLL_STEP_LEFT
ekGUI_SCROLL_STEP_RIGHT
ekGUI_SCROLL_PAGE_LEFT
ekGUI_SCROLL_PAGE_RIGHT
ekGUI_SCROLL_THUMB
ekGUI_FOCUS_CHANGED
ekGUI_FOCUS_KEEP
ekGUI_FOCUS_NO_NEXT
ekGUI_FOCUS_NO_RESIGN
ekGUI_FOCUS_NO_ACCEPT
ekGUI_TAB_KEY
ekGUI_TAB_BACKKEY
ekGUI_TAB_NEXT
ekGUI_TAB_PREV
ekGUI_TAB_MOVE
ekGUI_TAB_CLICK
ekGUI_EVENT_LABEL
ekGUI_EVENT_BUTTON
ekGUI_EVENT_POPUP
ekGUI_EVENT_LISTBOX
ekGUI_EVENT_SLIDER
ekGUI_EVENT_UPDOWN
ekGUI_EVENT_TXTFILTER
ekGUI_EVENT_TXTCHANGE
ekGUI_EVENT_FOCUS_RESIGN
ekGUI_EVENT_FOCUS_ACCEPT
ekGUI_EVENT_FOCUS
ekGUI_EVENT_MENU
ekGUI_EVENT_DRAW
ekGUI_EVENT_OVERLAY
ekGUI_EVENT_RESIZE
ekGUI_EVENT_ENTER
ekGUI_EVENT_EXIT
ekGUI_EVENT_MOVED
ekGUI_EVENT_DOWN
ekGUI_EVENT_UP
ekGUI_EVENT_CLICK
ekGUI_EVENT_DRAG
ekGUI_EVENT_WHEEL
ekGUI_EVENT_KEYDOWN
ekGUI_EVENT_KEYUP
ekGUI_EVENT_SCROLL
ekGUI_EVENT_WND_MOVED
ekGUI_EVENT_WND_SIZING
ekGUI_EVENT_WND_SIZE
ekGUI_EVENT_WND_CLOSE
ekGUI_EVENT_COLOR
ekGUI_EVENT_THEME
ekGUI_EVENT_OBJCHANGE
ekGUI_EVENT_TBL_NROWS
ekGUI_EVENT_TBL_BEGIN
ekGUI_EVENT_TBL_END
ekGUI_EVENT_TBL_CELL
ekGUI_EVENT_TBL_SEL
ekGUI_EVENT_TBL_HEADCLICK
ekGUI_EVENT_TBL_ROWCLICK
ekGUI_EVENT_IDLE
ekGUI_TYPE_LABEL
ekGUI_TYPE_BUTTON
ekGUI_TYPE_POPUP
ekGUI_TYPE_EDITBOX
ekGUI_TYPE_COMBOBOX
ekGUI_TYPE_SLIDER
ekGUI_TYPE_UPDOWN
ekGUI_TYPE_PROGRESS
ekGUI_TYPE_TEXTVIEW
ekGUI_TYPE_TABLEVIEW
ekGUI_TYPE_TREEVIEW
ekGUI_TYPE_BOXVIEW
ekGUI_TYPE_SPLITVIEW
ekGUI_TYPE_CUSTOMVIEW
ekGUI_TYPE_PANEL
ekGUI_TYPE_LINE
ekGUI_TYPE_HEADER
ekGUI_TYPE_WINDOW
ekGUI_TYPE_TOOLBAR
ekGUI_SIZE_MINI
ekGUI_SIZE_SMALL
ekGUI_SIZE_REGULAR
ekGUI_ROLE_MAIN
ekGUI_ROLE_OVERLAY
ekGUI_ROLE_MODAL
ekGUI_ROLE_MANAGED
ekGUI_PROP_RESIZE
ekGUI_PROP_CHILDREN
ekGUI_TEXT_FAMILY
ekGUI_TEXT_UNITS
ekGUI_TEXT_SIZE
ekGUI_TEXT_STYLE
ekGUI_TEXT_COLOR
ekGUI_TEXT_BGCOLOR
ekGUI_TEXT_PGCOLOR
ekGUI_TEXT_PARALIGN
ekGUI_TEXT_LSPACING
ekGUI_TEXT_BFPARSPACE
ekGUI_TEXT_AFPARSPACE
ekGUI_TEXT_SELECT
ekGUI_TEXT_SCROLL
ekCLIPBOARD_COPY
ekCLIPBOARD_CUT
ekCLIPBOARD_PASTE
ekLABEL_FLAG
ekLABEL_SINGLE
ekLABEL_MULTI
ekLABEL_TYPE
ekBUTTON_FLAG
ekBUTTON_PUSH
ekBUTTON_CHECK2 
ekBUTTON_CHECK3
ekBUTTON_RADIO
ekBUTTON_FLAT
ekBUTTON_FLATGLE
ekBUTTON_HEADER
ekBUTTON_TYPE
ekPOPUP_FLAG
ekEDIT_FLAG
ekEDIT_SINGLE
ekEDIT_MULTI
ekEDIT_TYPE
ekEDIT_AUTOSEL
ekCOMBO_FLAG
ekSLIDER_FLAG
ekSLIDER_HORZ
ekSLIDER_VERT
ekSLIDER_TYPE
ekUPDOWN_FLAG
ekPROGRESS_FLAG
ekPROGRESS_HORZ
ekPROGRESS_VERT
ekPROGRESS_TYPE
ekVIEW_OPENGL
ekVIEW_HSCROLL
ekVIEW_VSCROLL
ekVIEW_BORDER
ekVIEW_NOERASE
ekVIEW_CONTROL
ekTEXT_FLAG 
ekTABLE_FLAG
ekTABLE_TEXT
ekTABLE_ICON16
ekTABLE_EDIT
ekTABLE_COMBO
ekTABLE_POPUP
ekTABLE_RADIO
ekTABLE_CHECK
ekTABLE_TOOLTIP
ekTABLE_BGCOLOR
ekTABLE_ROWALT
ekTABLE_ROWPRESEL
ekSPLIT_FLAG
ekSPLIT_VERT 
ekSPLIT_HORZ
ekSPLIT_TYPE
ekSPLIT_PROP
ekSPLIT_LEFT
ekSPLIT_RIGHT
ekWINDOW_FLAG
ekWINDOW_EDGE 
ekWINDOW_TITLE 
ekWINDOW_MAX
ekWINDOW_MIN
ekWINDOW_CLOSE
ekWINDOW_RESIZE
ekWINDOW_RETURN
ekWINDOW_ESC
ekWINDOW_OFFSCREEN
ekWINDOW_MODAL_NOHIDE
ekWINDOW_STD
ekWINDOW_STDRES
ekMENU_FLAG
ekMENU_ITEM
ekMENU_SEPARATOR
ekCTRL_STATE_NORMAL
ekCTRL_STATE_HOT
ekCTRL_STATE_PRESSED
ekCTRL_STATE_BKNORMAL
ekCTRL_STATE_BKHOT
ekCTRL_STATE_BKPRESSED
ekCTRL_STATE_DISABLED
ekCTRL_MSEL_NO
ekCTRL_MSEL_SINGLE
ekCTRL_MSEL_BURST
ekCTRL_OP_ADD
ekCTRL_OP_DEL
ekCTRL_OP_INS
ekCTRL_OP_SET
ekSYSCOLOR_DARKMODE
ekSYSCOLOR_LABEL
ekSYSCOLOR_VIEW
ekSYSCOLOR_LINE
ekSYSCOLOR_LINK
ekSYSCOLOR_BORDER
</constant>

<comment>
unicode.h
</comment>

uint32_t unicode_convers(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t osize)
uint32_t unicode_convers_n(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t isize, const uint32_t osize)
uint32_t unicode_convers_nbytes(const char_t *str, const unicode_t from, const unicode_t to)

<comment>
uint32_t unicode_convers_nbytes_n(const char_t *str, const uint32_t isize, const unicode_t from, const unicode_t to)
</comment>

uint32_t unicode_nbytes(const char_t *str, const unicode_t format)
uint32_t unicode_nchars(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32b(const char_t *str, const unicode_t format, uint32_t *bytes)
uint32_t unicode_to_char(const uint32_t codepoint, char_t *str, const unicode_t format)
bool_t unicode_valid_str(const char_t *str, const unicode_t format)
bool_t unicode_valid_str_n(const char_t *str, const uint32_t size, const unicode_t format)
bool_t unicode_valid(const uint32_t codepoint)
const char_t *unicode_next(const char_t *str, const unicode_t format)
const char_t *unicode_back(const char_t *str, const unicode_t format)
bool_t unicode_isascii(const uint32_t codepoint)
bool_t unicode_isalnum(const uint32_t codepoint)
bool_t unicode_isalpha(const uint32_t codepoint)
bool_t unicode_iscntrl(const uint32_t codepoint)
bool_t unicode_isdigit(const uint32_t codepoint)
bool_t unicode_isgraph(const uint32_t codepoint)
bool_t unicode_isprint(const uint32_t codepoint)
bool_t unicode_ispunct(const uint32_t codepoint)
bool_t unicode_isspace(const uint32_t codepoint)
bool_t unicode_isxdigit(const uint32_t codepoint)
bool_t unicode_islower(const uint32_t codepoint)
bool_t unicode_isupper(const uint32_t codepoint)
uint32_t unicode_tolower(const uint32_t codepoint)
uint32_t unicode_toupper(const uint32_t codepoint)


<comment>
types.h
</comment>

uint32_t min_u32(const uint32_t v1, const uint32_t v2)
real32_t min_r32(const real32_t v1, const real32_t v2)
real64_t min_r64(const real64_t v1, const real64_t v2)
uint32_t max_u32(const uint32_t v1, const uint32_t v2)
real32_t max_r32(const real32_t v1, const real32_t v2)
real64_t max_r64(const real64_t v1, const real64_t v2)
real32_t abs_r32(const real32_t v)
uint8_t to_u8(const uint32_t v)


<comment>
sewer.h
</comment>

void sewer_start(void)
void sewer_finish(void)
uint32_t sewer_nappgui_major(void)
uint32_t sewer_nappgui_minor(void)
uint32_t sewer_nappgui_patch(void)
uint32_t sewer_nappgui_build(void)
const char_t *sewer_nappgui_version(const bool_t full)



<comment>
ptr.h
</comment>

void *ptr_dget_imp(void **dptr)
void *ptr_dget_no_null_imp(void **dptr)
void ptr_destopt_imp(void **dptr, FPtr_destroy func_destroy)
void *ptr_copyopt_imp(void *ptr, FPtr_copy func_copy)


<comment>
cassert.h
</comment>

void cassert_set_func(void *data, FPtr_assert func_assert)
void cassert_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_fatal_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_no_null_imp(void *ptr, const char_t *detail, const char_t *file, const uint32_t line)
<comment>
void cassert_no_nullf_imp(void (*ptr)(void), const char_t *detail, const char_t *file, const uint32_t line)
</comment>
void cassert_default_imp(const char_t *file, const uint32_t line)


<comment>
bstd.h
</comment>

<comment>
uint32_t bstd_sprintf(char_t *str, const uint32_t size, const char_t *format, ...) __PRINTF(3, 4)
uint32_t bstd_printf(const char_t *format, ...) __PRINTF(1, 2)
uint32_t bstd_eprintf(const char_t *format, ...) __PRINTF(1, 2)
</comment>

uint32_t bstd_vsprintf(char_t *str, const uint32_t size, const char_t *format, va_list args)
uint32_t bstd_writef(const char_t *str)
uint32_t bstd_ewritef(const char_t *str)
bool_t bstd_read(byte_t *data, const uint32_t size, uint32_t *rsize)
bool_t bstd_write(const byte_t *data, const uint32_t size, uint32_t *wsize)
bool_t bstd_ewrite(const byte_t *data, const uint32_t size, uint32_t *wsize)

<comment>
bmem.h
</comment>

byte_t *bmem_aligned_malloc(const uint32_t size, const uint32_t align)
byte_t *bmem_aligned_realloc(byte_t *mem, const uint32_t size, const uint32_t new_size, const uint32_t align)
void bmem_free(byte_t *mem)
void bmem_set1(byte_t *dest, const uint32_t size, const byte_t mask)
void bmem_set4(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set8(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set16(byte_t *dest, const uint32_t size, const byte_t *mask)
int bmem_cmp(const byte_t *mem1, const byte_t *mem2, const uint32_t size)
bool_t bmem_is_zero(const byte_t *mem, const uint32_t size)
void bmem_set_zero(byte_t *dest, const uint32_t size)
void bmem_copy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_move(byte_t *dest, const byte_t *src, const uint32_t size)
bool_t bmem_overlaps(const byte_t *mem1, const byte_t *mem2, const uint32_t size1, const uint32_t size2)
void bmem_rev(byte_t *mem, const uint32_t size)
void bmem_rev2(byte_t *mem)
void bmem_rev4(byte_t *mem)
void bmem_rev8(byte_t *mem)
void bmem_revcopy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_rev_elems_imp(byte_t *data, const uint32_t num_elems, const uint32_t elem_size)
void bmem_swap(byte_t *mem1, byte_t *mem2, const uint32_t size)
void bmem_shuffle(byte_t *mem, const uint32_t size, const uint32_t esize)


<comment>
bmath.h
</comment>

real32_t bmath_cosf(const real32_t angle)
real64_t bmath_cosd(const real64_t angle)
real32_t bmath_sinf(const real32_t angle)
real64_t bmath_sind(const real64_t angle)
real32_t bmath_tanf(const real32_t angle)
real64_t bmath_tand(const real64_t angle)
real32_t bmath_acosf(const real32_t cos)
real64_t bmath_acosd(const real64_t cos)
real32_t bmath_asinf(const real32_t sin)
real64_t bmath_asind(const real64_t sin)
real32_t bmath_atan2f(const real32_t y, const real32_t x)
real64_t bmath_atan2d(const real64_t y, const real64_t x)
real32_t bmath_norm_anglef(const real32_t a)
real64_t bmath_norm_angled(const real64_t a)
real32_t bmath_sqrtf(const real32_t value)
real64_t bmath_sqrtd(const real64_t value)
real32_t bmath_isqrtf(const real32_t value)
real64_t bmath_isqrtd(const real64_t value)
real32_t bmath_logf(const real32_t value)
real64_t bmath_logd(const real64_t value)
real32_t bmath_log10f(const real32_t value)
real64_t bmath_log10d(const real64_t value)
real32_t bmath_expf(const real32_t value)
real64_t bmath_expd(const real64_t value)
real32_t bmath_powf(const real32_t base, const real32_t exponent)
real64_t bmath_powd(const real64_t base, const real64_t exponent)
real32_t bmath_absf(const real32_t value)
real64_t bmath_absd(const real64_t value)
real32_t bmath_maxf(const real32_t value1, const real32_t value2)
real64_t bmath_maxd(const real64_t value1, const real64_t value2)
real32_t bmath_minf(const real32_t value1, const real32_t value2)
real64_t bmath_mind(const real64_t value1, const real64_t value2)
real32_t bmath_clampf(const real32_t value, const real32_t min, const real32_t max)
real64_t bmath_clampd(const real64_t value, const real64_t min, const real64_t max)
real32_t bmath_modf(const real32_t num, const real32_t den)
real64_t bmath_modd(const real64_t num, const real64_t den)
real32_t bmath_modff(const real32_t value, real32_t *intpart)
real64_t bmath_modfd(const real64_t value, real64_t *intpart)
uint32_t bmath_precf(const real32_t value)
uint32_t bmath_precd(const real64_t value)
real32_t bmath_roundf(const real32_t value)
real64_t bmath_roundd(const real64_t value)
real32_t bmath_round_stepf(const real32_t value, const real32_t step)
real64_t bmath_round_stepd(const real64_t value, const real64_t step)
real32_t bmath_floorf(const real32_t value)
real64_t bmath_floord(const real64_t value)
real32_t bmath_ceilf(const real32_t value)
real64_t bmath_ceild(const real64_t value)
void bmath_rand_seed(const uint32_t seed)
real32_t bmath_randf(const real32_t from, const real32_t to)
real64_t bmath_randd(const real64_t from, const real64_t to)
uint32_t bmath_randi(const uint32_t from, const uint32_t to)
REnv *bmath_rand_env(const uint32_t seed)
void bmath_rand_destroy(REnv **env)
real32_t bmath_rand_mtf(REnv *env, const real32_t from, const real32_t to)
real64_t bmath_rand_mtd(REnv *env, const real64_t from, const real64_t to)
uint32_t bmath_rand_mti(REnv *env, const uint32_t from, const uint32_t to)


<comment>
blib.h
</comment>

uint32_t blib_strlen(const char_t *str)
char_t *blib_strstr(const char_t *str, const char_t *substr)
void blib_strcpy(char_t *dest, const uint32_t size, const char_t *src)
void blib_strncpy(char_t *dest, const uint32_t size, const char_t *src, const uint32_t n)
void blib_strcat(char_t *dest, const uint32_t size, const char_t *src)
int blib_strcmp(const char_t *str1, const char_t *str2)
int blib_strncmp(const char_t *str1, const char_t *str2, const uint32_t n)
uint32_t blib_strftime(char_t *dest, const uint32_t size, const char_t *format, const int16_t year, const uint8_t month, const uint8_t mday, const uint8_t wday, const uint8_t hour, const uint8_t minute, const uint8_t second)
int64_t blib_strtol(const char_t *str, char_t **endptr, uint32_t base, bool_t *err)
uint64_t blib_strtoul(const char_t *str, char_t **endptr, uint32_t base, bool_t *err)
real32_t blib_strtof(const char_t *str, char_t **endptr, bool_t *err)
real64_t blib_strtod(const char_t *str, char_t **endptr, bool_t *err)
void blib_qsort(byte_t *array, const uint32_t nelems, const uint32_t size, FPtr_compare func_compare)
void blib_qsort_ex(const byte_t *array, const uint32_t nelems, const uint32_t size, FPtr_compare_ex func_compare, const byte_t *data)
bool_t blib_bsearch(const byte_t *array, const byte_t *key, const uint32_t nelems, const uint32_t size, FPtr_compare func_compare, uint32_t *pos)
bool_t blib_bsearch_ex(const byte_t *array, const byte_t *key, const uint32_t nelems, const uint32_t size, FPtr_compare_ex func_compare, const byte_t *data, uint32_t *pos)
const char_t *blib_getenv(const char_t *name)

<comment>
void blib_atexit(void (*func)(void))
</comment>

void blib_abort(void)
void blib_exit(int code)
void blib_debug_break(void)

<comment>
oswindow.h
</comment>

OSWindow *oswindow_create(const uint32_t flags)
OSWindow *oswindow_managed(void *native_ptr)
void oswindow_destroy(OSWindow **window)
void oswindow_OnMoved(OSWindow *window, Listener *listener)
void oswindow_OnResize(OSWindow *window, Listener *listener)
void oswindow_OnClose(OSWindow *window, Listener *listener)
void oswindow_title(OSWindow *window, const char_t *text)
void oswindow_edited(OSWindow *window, const bool_t is_edited)
void oswindow_movable(OSWindow *window, const bool_t is_movable)
void oswindow_z_order(OSWindow *window, OSWindow *below_window)
void oswindow_alpha(OSWindow *window, const real32_t alpha)
void oswindow_enable_mouse_events(OSWindow *window, const bool_t enabled)
void oswindow_hotkey(OSWindow *window, const vkey_t key, const uint32_t modifiers, Listener *listener)
void oswindow_taborder(OSWindow *window, OSControl *control)
void oswindow_tabcycle(OSWindow *window, const bool_t cycle)
gui_focus_t oswindow_tabstop(OSWindow *window, const bool_t next)
gui_focus_t oswindow_focus(OSWindow *window, OSControl *control)
OSControl *oswindow_get_focus(const OSWindow *window)
gui_tab_t oswindow_info_focus(const OSWindow *window, void **next_ctrl)
void oswindow_attach_panel(OSWindow *window, OSPanel *panel)
void oswindow_detach_panel(OSWindow *window, OSPanel *panel)
void oswindow_attach_window(OSWindow *parent_window, OSWindow *child_window)
void oswindow_detach_window(OSWindow *parent_window, OSWindow *child_window)
void oswindow_launch(OSWindow *window, OSWindow *parent_window)
void oswindow_hide(OSWindow *window, OSWindow *parent_window)
uint32_t oswindow_launch_modal(OSWindow *window, OSWindow *parent_window)
void oswindow_stop_modal(OSWindow *window, const uint32_t return_value)
void oswindow_get_origin(const OSWindow *window, real32_t *x, real32_t *y)
void oswindow_origin(OSWindow *window, const real32_t x, const real32_t y)
void oswindow_get_size(const OSWindow *window, real32_t *width, real32_t *height)
void oswindow_size(OSWindow *window, const real32_t content_width, const real32_t content_height)
void oswindow_set_default_pushbutton(OSWindow *window, OSButton *button)
void oswindow_set_cursor(OSWindow *window, Cursor *cursor)
void oswindow_property(OSWindow *window, const gui_prop_t prop, const void *value)



<comment>
osview.h
</comment>

OSView *osview_create(const uint32_t flags)
void osview_destroy(OSView **view)
void osview_OnDraw(OSView *view, Listener *listener)
void osview_OnOverlay(OSView *view, Listener *listener)
void osview_OnEnter(OSView *view, Listener *listener)
void osview_OnExit(OSView *view, Listener *listener)
void osview_OnMoved(OSView *view, Listener *listener)
void osview_OnDown(OSView *view, Listener *listener)
void osview_OnUp(OSView *view, Listener *listener)
void osview_OnClick(OSView *view, Listener *listener)
void osview_OnDrag(OSView *view, Listener *listener)
void osview_OnWheel(OSView *view, Listener *listener)
void osview_OnKeyDown(OSView *view, Listener *listener)
void osview_OnKeyUp(OSView *view, Listener *listener)
void osview_OnFocus(OSView *view, Listener *listener)
void osview_OnResignFocus(OSView *view, Listener *listener)
void osview_OnAcceptFocus(OSView *view, Listener *listener)
void osview_OnScroll(OSView *view, Listener *listener)
void osview_scroll(OSView *view, const real32_t x, const real32_t y)
void osview_scroll_get(const OSView *view, real32_t *x, real32_t *y)
void osview_scroller_size(const OSView *view, real32_t *width, real32_t *height)
void osview_scroller_visible(OSView *view, const bool_t horizontal, const bool_t vertical)
void osview_content_size(OSView *view, const real32_t width, const real32_t height, const real32_t line_width, const real32_t line_height)
real32_t osview_scale_factor(const OSView *view)
void osview_set_need_display(OSView *view)
void *osview_get_native_view(const OSView *view)
void osview_attach(OSView *view, OSPanel *panel)
void osview_detach(OSView *view, OSPanel *panel)
void osview_visible(OSView *view, const bool_t visible)
void osview_enabled(OSView *view, const bool_t enabled)
void osview_size(const OSView *view, real32_t *width, real32_t *height)
void osview_origin(const OSView *view, real32_t *x, real32_t *y)
void osview_frame(OSView *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
ossubdown.h
</comment>

OSUpDown *osupdown_create(const uint32_t flags)
void osupdown_destroy(OSUpDown **updown)
void osupdown_OnClick(OSUpDown *updown, Listener *listener)
void osupdown_tooltip(OSUpDown *updown, const char_t *text)
void osupdown_attach(OSUpDown *updown, OSPanel *panel)
void osupdown_detach(OSUpDown *updown, OSPanel *panel)
void osupdown_visible(OSUpDown *updown, const bool_t visible)
void osupdown_enabled(OSUpDown *updown, const bool_t enabled)
void osupdown_size(const OSUpDown *updown, real32_t *width, real32_t *height)
void osupdown_origin(const OSUpDown *updown, real32_t *x, real32_t *y)
void osupdown_frame(OSUpDown *updown, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
ostext.h
</comment>

OSText *ostext_create(const uint32_t flags)
void ostext_destroy(OSText **view)
void ostext_OnFilter(OSText *view, Listener *listener)
void ostext_OnFocus(OSText *view, Listener *listener)
void ostext_insert_text(OSText *view, const char_t *text)
void ostext_set_text(OSText *view, const char_t *text)
void ostext_set_rtf(OSText *view, Stream *rtf_in)
void ostext_property(OSText *view, const gui_text_t prop, const void *value)
void ostext_editable(OSText *view, const bool_t is_editable)
const char_t *ostext_get_text(const OSText *view)
void ostext_scroller_visible(OSText *view, const bool_t horizontal, const bool_t vertical)
void ostext_set_need_display(OSText *view)
void ostext_clipboard(OSText *view, const clipboard_t clipboard)
void ostext_attach(OSText *view, OSPanel *panel)
void ostext_detach(OSText *view, OSPanel *panel)
void ostext_visible(OSText *view, const bool_t visible)
void ostext_enabled(OSText *view, const bool_t enabled)
void ostext_size(const OSText *view, real32_t *width, real32_t *height)
void ostext_origin(const OSText *view, real32_t *x, real32_t *y)
void ostext_frame(OSText *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)



<comment>
ossplit.h
</comment>

OSSplit *ossplit_create(const uint32_t flags)
void ossplit_destroy(OSSplit **view)
void ossplit_attach_control(OSSplit *view, OSControl *control)
void ossplit_detach_control(OSSplit *view, OSControl *control)
void ossplit_OnDrag(OSSplit *view, Listener *listener)
void ossplit_track_area(OSSplit *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)
void ossplit_attach(OSSplit *view, OSPanel *panel)
void ossplit_detach(OSSplit *view, OSPanel *panel)
void ossplit_visible(OSSplit *view, const bool_t is_visible)
void ossplit_enabled(OSSplit *view, const bool_t is_enabled)
void ossplit_size(const OSSplit *view, real32_t *width, real32_t *height)
void ossplit_origin(const OSSplit *view, real32_t *x, real32_t *y)
void ossplit_frame(OSSplit *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
osslider.h
</comment>

OSSlider *osslider_create(const uint32_t flags)
void osslider_destroy(OSSlider **slider)
void osslider_OnMoved(OSSlider *slider, Listener *listener)
void osslider_tooltip(OSSlider *slider, const char_t *text)
void osslider_tickmarks(OSSlider *slider, const uint32_t num_tickmarks, const bool_t tickmarks_at_left_top)
void osslider_position(OSSlider *slider, const real32_t position)
real32_t osslider_get_position(const OSSlider *slider)
void osslider_bounds(const OSSlider *slider, const real32_t length, const gui_size_t knob_size, real32_t *width, real32_t *height)
void osslider_attach(OSSlider *slider, OSPanel *panel)
void osslider_detach(OSSlider *slider, OSPanel *panel)
void osslider_visible(OSSlider *slider, const bool_t visible)
void osslider_enabled(OSSlider *slider, const bool_t enabled)
void osslider_size(const OSSlider *slider, real32_t *width, real32_t *height)
void osslider_origin(const OSSlider *slider, real32_t *x, real32_t *y)
void osslider_frame(OSSlider *slider, const real32_t x, const real32_t y, const real32_t width, const real32_t height)



<comment>
osprogress.h
</comment>

OSProgress *osprogress_create(const uint32_t flags)
void osprogress_destroy(OSProgress **progress)
void osprogress_position(OSProgress *progress, const real32_t position)
real32_t osprogress_thickness(const OSProgress *progress, const gui_size_t size)
void osprogress_attach(OSProgress *progress, OSPanel *panel)
void osprogress_detach(OSProgress *progress, OSPanel *panel)
void osprogress_visible(OSProgress *progress, const bool_t visible)
void osprogress_enabled(OSProgress *progress, const bool_t enabled)
void osprogress_size(const OSProgress *progress, real32_t *width, real32_t *height)
void osprogress_origin(const OSProgress *progress, real32_t *x, real32_t *y)
void osprogress_frame(OSProgress *progress, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
ospopup.h
</comment>


OSPopUp *ospopup_create(const uint32_t flags)
void ospopup_destroy(OSPopUp **popup)
void ospopup_OnSelect(OSPopUp *popup, Listener *listener)
void ospopup_elem(OSPopUp *popup, const ctrl_op_t op, const uint32_t index, const char_t *text, const Image *image)
void ospopup_tooltip(OSPopUp *popup, const char_t *text)
void ospopup_font(OSPopUp *popup, const Font *font)
void ospopup_list_height(OSPopUp *popup, const uint32_t num_elems)
void ospopup_selected(OSPopUp *popup, const uint32_t index)
uint32_t ospopup_get_selected(const OSPopUp *popup)
void ospopup_bounds(const OSPopUp *popup, const char_t *text, real32_t *width, real32_t *height)
void ospopup_attach(OSPopUp *popup, OSPanel *panel)
void ospopup_detach(OSPopUp *popup, OSPanel *panel)
void ospopup_visible(OSPopUp *popup, const bool_t visible)
void ospopup_enabled(OSPopUp *popup, const bool_t enabled)
void ospopup_size(const OSPopUp *popup, real32_t *width, real32_t *height)
void ospopup_origin(const OSPopUp *popup, real32_t *x, real32_t *y)
void ospopup_frame(OSPopUp *popup, const real32_t x, const real32_t y, const real32_t width, const real32_t height)



<comment>
ospanel.h
</comment>


OSPanel *ospanel_create(const uint32_t flags)
void ospanel_destroy(OSPanel **panel)
void ospanel_area(OSPanel *panel, void *obj, const color_t bgcolor, const color_t skcolor, const real32_t x, const real32_t y, const real32_t width, const real32_t height)
void ospanel_scroller_size(const OSPanel *panel, real32_t *width, real32_t *height)
void ospanel_content_size(OSPanel *panel, const real32_t width, const real32_t height, const real32_t line_width, const real32_t line_height)
void ospanel_display(OSPanel *panel)
void ospanel_attach(OSPanel *panel, OSPanel *parent_panel)
void ospanel_detach(OSPanel *panel, OSPanel *parent_panel)
void ospanel_visible(OSPanel *panel, const bool_t visible)
void ospanel_enabled(OSPanel *panel, const bool_t enabled)
void ospanel_size(const OSPanel *panel, real32_t *width, real32_t *height)
void ospanel_origin(const OSPanel *panel, real32_t *x, real32_t *y)
void ospanel_frame(OSPanel *panel, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
osmenuitem.h
</comment>

OSMenuItem *osmenuitem_create(const uint32_t flags)
void osmenuitem_destroy(OSMenuItem **item)
void osmenuitem_OnClick(OSMenuItem *item, Listener *listener)
void osmenuitem_enabled(OSMenuItem *item, const bool_t enabled)
void osmenuitem_visible(OSMenuItem *item, const bool_t visible)
void osmenuitem_text(OSMenuItem *item, const char_t *text)
void osmenuitem_image(OSMenuItem *item, const Image *image)
void osmenuitem_key(OSMenuItem *item, const uint32_t key, const uint32_t modifiers)
void osmenuitem_state(OSMenuItem *item, const gui_state_t state)
void osmenuitem_submenu(OSMenuItem *item, OSMenu *menu)
void osmenuitem_unset_submenu(OSMenuItem *item, OSMenu *menu)


<comment>
osmenu.h
</comment>


OSMenu *osmenu_create(const uint32_t flags)
void osmenu_destroy(OSMenu **menu)
void osmenu_add_item(OSMenu *menu, OSMenuItem *item)
void osmenu_delete_item(OSMenu *menu, OSMenuItem *item)
void osmenu_launch(OSMenu *menu, OSWindow *window, const real32_t x, const real32_t y)
void osmenu_hide(OSMenu *menu)


<comment>
oslabel.h
</comment>


OSLabel *oslabel_create(const uint32_t flags)
void oslabel_destroy(OSLabel **label)
void oslabel_OnClick(OSLabel *label, Listener *listener)
void oslabel_OnEnter(OSLabel *label, Listener *listener)
void oslabel_OnExit(OSLabel *label, Listener *listener)
void oslabel_text(OSLabel *label, const char_t *text)
void oslabel_font(OSLabel *label, const Font *font)
void oslabel_align(OSLabel *label, const align_t align)
void oslabel_ellipsis(OSLabel *label, const ellipsis_t ellipsis)
void oslabel_color(OSLabel *label, const color_t color)
void oslabel_bgcolor(OSLabel *label, const color_t color)
void oslabel_bounds(const OSLabel *label, const char_t *text, const real32_t refwidth, real32_t *width, real32_t *height)
void oslabel_attach(OSLabel *label, OSPanel *panel)
void oslabel_detach(OSLabel *label, OSPanel *panel)
void oslabel_visible(OSLabel *label, const bool_t visible)
void oslabel_enabled(OSLabel *label, const bool_t enabled)
void oslabel_size(const OSLabel *label, real32_t *width, real32_t *height)
void oslabel_origin(const OSLabel *label, real32_t *x, real32_t *y)
void oslabel_frame(OSLabel *label, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
osguictx.h
</comment>

GuiCtx *osguictx(void)

<comment>
osgui.h
</comment>


void osgui_start(void)
void osgui_finish(void)
void osgui_set_menubar(OSMenu *menu, OSWindow *window)
void osgui_unset_menubar(OSMenu *menu, OSWindow *window)
void osgui_redraw_menubar(void)
void osgui_message_loop(void)
bool_t osgui_is_initialized(void)
void osgui_initialize(void)
void osgui_terminate(void)
void osgui_set_app(void *app, void *icon)

<comment>
osglobals.h
</comment>


device_t osglobals_device(const void *non_used)
color_t osglobals_color(const syscolor_t *color)
void osglobals_resolution(const void *non_used, real32_t *width, real32_t *height)
void osglobals_mouse_position(const void *non_used, real32_t *x, real32_t *y)
Cursor *osglobals_cursor(const gui_cursor_t cursor, const Image *image, const real32_t hot_x, const real32_t hot_y)
void osglobals_cursor_destroy(Cursor **cursor)
void osglobals_value(const uint32_t index, void *value)
void osglobals_transitions(void *nonused, const real64_t prtime, const real64_t crtime)
void osglobals_OnIdle(void *nonused, Listener *listener)

<comment>
void osglobals_theme_changed(void)
</comment>


<comment>
osedit.h
</comment>


OSEdit *osedit_create(const uint32_t flags)
void osedit_destroy(OSEdit **edit)
void osedit_OnFilter(OSEdit *edit, Listener *listener)
void osedit_OnChange(OSEdit *edit, Listener *listener)
void osedit_OnFocus(OSEdit *edit, Listener *listener)
void osedit_text(OSEdit *edit, const char_t *text)
void osedit_tooltip(OSEdit *edit, const char_t *text)
void osedit_font(OSEdit *edit, const Font *font)
void osedit_align(OSEdit *edit, const align_t align)
void osedit_passmode(OSEdit *edit, const bool_t passmode)
void osedit_editable(OSEdit *edit, const bool_t is_editable)
void osedit_autoselect(OSEdit *edit, const bool_t autoselect)
void osedit_select(OSEdit *edit, const int32_t start, const int32_t end)
void osedit_color(OSEdit *edit, const color_t color)
void osedit_bgcolor(OSEdit *edit, const color_t color)
void osedit_vpadding(OSEdit *edit, const real32_t padding)
void osedit_bounds(const OSEdit *edit, const real32_t refwidth, const uint32_t lines, real32_t *width, real32_t *height)
void osedit_clipboard(OSEdit *edit, const clipboard_t clipboard)
void osedit_attach(OSEdit *edit, OSPanel *panel)
void osedit_detach(OSEdit *edit, OSPanel *panel)
void osedit_visible(OSEdit *edit, const bool_t visible)
void osedit_enabled(OSEdit *edit, const bool_t enabled)
void osedit_size(const OSEdit *edit, real32_t *width, real32_t *height)
void osedit_origin(const OSEdit *edit, real32_t *x, real32_t *y)
void osedit_frame(OSEdit *edit, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
osdrawctrl.h
</comment>


Font *osdrawctrl_font(const DCtx *ctx)
uint32_t osdrawctrl_row_padding(const DCtx *ctx)
uint32_t osdrawctrl_check_width(const DCtx *ctx)
uint32_t osdrawctrl_check_height(const DCtx *ctx)
ctrl_msel_t osdrawctrl_multisel(const DCtx *ctx, const vkey_t key)
void osdrawctrl_clear(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const enum_t nonused)
void osdrawctrl_header(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_indicator(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const indicator_t indicator)
void osdrawctrl_fill(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_focus(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_line(DCtx *ctx, const int32_t x0, const int32_t y0, const int32_t x1, const int32_t y1)
void osdrawctrl_text(DCtx *ctx, const char_t *text, const int32_t x, const int32_t y, const ctrl_state_t state)
void osdrawctrl_image(DCtx *ctx, const Image *image, const int32_t x, const int32_t y, const ctrl_state_t state)
void osdrawctrl_checkbox(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_uncheckbox(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)


<comment>
oscomwin.h
</comment>


const char_t *oscomwin_file(OSWindow *parent, const char_t **ftypes, const uint32_t size, const char_t *start_dir, const bool_t open)
void oscomwin_color(OSWindow *parent, const char_t *title, const real32_t x, const real32_t y, const align_t halign, const align_t valign, const color_t current, color_t *colors, const uint32_t n, Listener *OnChange)

<comment>
oscombo.h
</comment>


OSCombo *oscombo_create(const uint32_t flags)
void oscombo_destroy(OSCombo **combo)
void oscombo_OnFilter(OSCombo *combo, Listener *listener)
void oscombo_OnChange(OSCombo *combo, Listener *listener)
void oscombo_OnFocus(OSCombo *combo, Listener *listener)
void oscombo_OnSelect(OSCombo *combo, Listener *listener)
void oscombo_text(OSCombo *combo, const char_t *text)
void oscombo_tooltip(OSCombo *combo, const char_t *text)
void oscombo_font(OSCombo *combo, const Font *font)
void oscombo_align(OSCombo *combo, const align_t align)
void oscombo_passmode(OSCombo *combo, const bool_t passmode)
void oscombo_color(OSCombo *combo, const color_t color)
void oscombo_bgcolor(OSCombo *combo, const color_t color)
void oscombo_elem(OSCombo *combo, const ctrl_op_t op, const uint32_t index, const char_t *text, const Image *image)
void oscombo_selected(OSCombo *combo, const uint32_t index)
uint32_t oscombo_get_selected(const OSCombo *combo)
void oscombo_bounds(const OSCombo *combo, const real32_t refwidth, real32_t *width, real32_t *height)
void oscombo_attach(OSCombo *combo, OSPanel *panel)
void oscombo_detach(OSCombo *combo, OSPanel *panel)
void oscombo_visible(OSCombo *combo, const bool_t visible)
void oscombo_enabled(OSCombo *combo, const bool_t enabled)
void oscombo_size(const OSCombo *combo, real32_t *width, real32_t *height)
void oscombo_origin(const OSCombo *combo, real32_t *x, real32_t *y)
void oscombo_frame(OSCombo *combo, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
osbutton.h
</comment>


OSButton *osbutton_create(const uint32_t flags)
void osbutton_destroy(OSButton **button)
void osbutton_OnClick(OSButton *button, Listener *listener)
void osbutton_text(OSButton *button, const char_t *text)
void osbutton_tooltip(OSButton *button, const char_t *text)
void osbutton_font(OSButton *button, const Font *font)
void osbutton_align(OSButton *button, const align_t align)
void osbutton_image(OSButton *button, const Image *image)
void osbutton_state(OSButton *button, const gui_state_t state)
gui_state_t osbutton_get_state(const OSButton *button)
void osbutton_vpadding(OSButton *button, const real32_t padding)
void osbutton_bounds(const OSButton *button, const char_t *text, const real32_t refwidth, const real32_t refheight, real32_t *width, real32_t *height)
void osbutton_attach(OSButton *button, OSPanel *panel)
void osbutton_detach(OSButton *button, OSPanel *panel)
void osbutton_visible(OSButton *button, const bool_t visible)
void osbutton_enabled(OSButton *button, const bool_t enabled)
void osbutton_size(const OSButton *button, real32_t *width, real32_t *height)
void osbutton_origin(const OSButton *button, real32_t *x, real32_t *y)
void osbutton_frame(OSButton *button, const real32_t x, const real32_t y, const real32_t width, const real32_t height)




<comment>
osbs.h
</comment>

void osbs_start(void)
void osbs_finish(void)
platform_t osbs_platform(void)
win_t osbs_windows(void)
endian_t osbs_endian(void)


<comment>
log.h
</comment>

<comment>
uint32_t log_printf(const char_t *format, ...) __PRINTF(1, 2)
</comment>

void log_output(const bool_t std, const bool_t err)
void log_file(const char_t *pathname)
const char_t *log_get_file(void)

<comment>
dlib.h
</comment>

DLib *dlib_open(const char_t *path, const char_t *libname)
void dlib_close(DLib **dlib)
FPtr_libproc dlib_proc_imp(DLib *dlib, const char_t *procname)
void *dlib_var_imp(DLib *dlib, const char_t *varname)

<comment>
btime.h
</comment>

uint64_t btime_now(void)
void btime_date(Date *date)
uint64_t btime_to_micro(const Date *date)
void btime_to_date(const uint64_t micro, Date *date)

<comment>
bthread.h
</comment>

Thread *bthread_create_imp(FPtr_thread_main thmain, void *data)
int bthread_current_id(void)
void bthread_close(Thread **thread)
bool_t bthread_cancel(Thread *thread)
uint32_t bthread_wait(Thread *thread)
bool_t bthread_finish(Thread *thread, uint32_t *code)
void bthread_sleep(const uint32_t milliseconds)

<comment>
bsocket.h
</comment>


Socket *bsocket_connect(const uint32_t ip, const uint16_t port, const uint32_t timeout_ms, serror_t *error)
Socket *bsocket_server(const uint16_t port, const uint32_t max_connect, serror_t *error)
Socket *bsocket_accept(Socket *socket, const uint32_t timeout_ms, serror_t *error)
void bsocket_close(Socket **socket)
void bsocket_local_ip(Socket *socket, uint32_t *ip, uint16_t *port)
void bsocket_remote_ip(Socket *socket, uint32_t *ip, uint16_t *port)
void bsocket_read_timeout(Socket *socket, const uint32_t timeout_ms)
void bsocket_write_timeout(Socket *socket, const uint32_t timeout_ms)
bool_t bsocket_read(Socket *socket, byte_t *data, const uint32_t size, uint32_t *rsize, serror_t *error)
bool_t bsocket_write(Socket *socket, const byte_t *data, const uint32_t size, uint32_t *wsize, serror_t *error)
uint32_t bsocket_url_ip(const char_t *url, serror_t *error)
uint32_t bsocket_str_ip(const char_t *ip)
const char_t *bsocket_host_name(char_t *buffer, const uint32_t size)
const char_t *bsocket_host_name_ip(const uint32_t ip, char_t *buffer, const uint32_t size)
const char_t *bsocket_ip_str(const uint32_t ip)
void bsocket_hton2(byte_t *dest, const byte_t *src)
void bsocket_hton4(byte_t *dest, const byte_t *src)
void bsocket_hton8(byte_t *dest, const byte_t *src)
void bsocket_ntoh2(byte_t *dest, const byte_t *src)
void bsocket_ntoh4(byte_t *dest, const byte_t *src)
void bsocket_ntoh8(byte_t *dest, const byte_t *src)

<comment>
bproc.h
</comment>


Proc *bproc_exec(const char_t *command, perror_t *error)
void bproc_close(Proc **proc)
bool_t bproc_cancel(Proc *proc)
uint32_t bproc_wait(Proc *proc)
bool_t bproc_finish(Proc *proc, uint32_t *code)
bool_t bproc_read(Proc *proc, byte_t *data, const uint32_t size, uint32_t *rsize, perror_t *error)
bool_t bproc_eread(Proc *proc, byte_t *data, const uint32_t size, uint32_t *rsize, perror_t *error)
bool_t bproc_write(Proc *proc, const byte_t *data, const uint32_t size, uint32_t *wsize, perror_t *error)
bool_t bproc_read_close(Proc *proc)
bool_t bproc_eread_close(Proc *proc)
bool_t bproc_write_close(Proc *proc)
void bproc_exit(const uint32_t code)

<comment>
bmutex.h
</comment>


Mutex *bmutex_create(void)
void bmutex_close(Mutex **mutex)
void bmutex_lock(Mutex *mutex)
void bmutex_unlock(Mutex *mutex)



<comment>
bfile.h
</comment>


uint32_t bfile_dir_work(char_t *pathname, const uint32_t size)
bool_t bfile_dir_set_work(const char_t *pathname, ferror_t *error)
uint32_t bfile_dir_home(char_t *pathname, const uint32_t size)
uint32_t bfile_dir_data(char_t *pathname, const uint32_t size)
uint32_t bfile_dir_exec(char_t *pathname, const uint32_t size)
bool_t bfile_dir_create(const char_t *pathname, ferror_t *error)
Dir *bfile_dir_open(const char_t *pathname, ferror_t *error)
void bfile_dir_close(Dir **dir)
bool_t bfile_dir_get(Dir *dir, char_t *name, const uint32_t size, file_type_t *type, uint64_t *fsize, Date *updated, ferror_t *error)
bool_t bfile_dir_delete(const char_t *pathname, ferror_t *error)
File *bfile_create(const char_t *pathname, ferror_t *error)
File *bfile_open(const char_t *pathname, const file_mode_t mode, ferror_t *error)
void bfile_close(File **file)
bool_t bfile_lstat(const char_t *pathname, file_type_t *type, uint64_t *size, Date *updated, ferror_t *error)
bool_t bfile_fstat(const File *file, file_type_t *type, uint64_t *size, Date *updated, ferror_t *error)
bool_t bfile_read(File *file, byte_t *data, const uint32_t size, uint32_t *rsize, ferror_t *error)
bool_t bfile_write(File *file, const byte_t *data, const uint32_t size, uint32_t *wsize, ferror_t *error)
bool_t bfile_seek(File *file, const int64_t offset, const file_seek_t whence, ferror_t *error)
uint64_t bfile_pos(const File *file)
bool_t bfile_delete(const char_t *pathname, ferror_t *error)

<comment>
osapp.h
</comment>


void osapp_finish(void)
void osapp_task_imp(void *data, const real32_t updtime, FPtr_task_main func_task_main, FPtr_task_update func_task_update, FPtr_task_end func_task_end)
void osapp_menubar(Menu *menu, Window *window)
void osapp_open_url(const char_t *url)

<comment>
url.h
</comment>


Url *url_parse(const char_t *url)
void url_destroy(Url **url)
const char_t *url_scheme(const Url *url)
const char_t *url_user(const Url *url)
const char_t *url_pass(const Url *url)
const char_t *url_host(const Url *url)
const char_t *url_path(const Url *url)
const char_t *url_params(const Url *url)
const char_t *url_query(const Url *url)
const char_t *url_fragment(const Url *url)
String *url_resource(const Url *url)
uint16_t url_port(const Url *url)

<comment>
json.h
</comment>

void *json_read_imp(Stream *stm, const JsonOpts *opts, const char_t *type)
void json_write_imp(Stream *stm, const void *data, const JsonOpts *opts, const char_t *type)
void json_destroy_imp(void **data, const char_t *type)
void json_destopt_imp(void **data, const char_t *type)

<comment>
inet.h
</comment>

void inet_start(void)
void inet_finish(void)

<comment>
httpreq.h
</comment>

Http *http_create(const char_t *host, const uint16_t port)
Http *http_secure(const char_t *host, const uint16_t port)
void http_destroy(Http **http)
void http_clear_headers(Http *http)
void http_add_header(Http *http, const char_t *name, const char_t *value)
bool_t http_get(Http *http, const char_t *path, const byte_t *data, const uint32_t size, ierror_t *error)
bool_t http_post(Http *http, const char_t *path, const byte_t *data, const uint32_t size, ierror_t *error)
uint32_t http_response_status(const Http *http)
const char_t *http_response_protocol(const Http *http)
const char_t *http_response_message(const Http *http)
uint32_t http_response_size(const Http *http)
const char_t *http_response_name(const Http *http, const uint32_t index)
const char_t *http_response_value(const Http *http, const uint32_t index)
const char_t *http_response_header(const Http *http, const char_t *name)
bool_t http_response_body(const Http *http, Stream *body, ierror_t *error)
Stream *http_dget(const char_t *url, uint32_t *result, ierror_t *error)
bool_t http_exists(const char_t *url)


<comment>
base64.h
</comment>


uint32_t b64_encoded_size(const uint32_t data_size)
uint32_t b64_decoded_size(const uint32_t encoded_size)
uint32_t b64_encode(const byte_t *data, const uint32_t size, char_t *base64, const uint32_t esize)
uint32_t b64_decode(const char_t *base64, const uint32_t size, byte_t *data)



<comment>
window.h
</comment>


Window *window_create(const uint32_t flags)
void window_destroy(Window **window)
void window_panel(Window *window, Panel *panel)
void window_OnClose(Window *window, Listener *listener)
void window_OnMoved(Window *window, Listener *listener)
void window_OnResize(Window *window, Listener *listener)
void window_title(Window *window, const char_t *text)
void window_show(Window *window)
void window_hide(Window *window)
void window_overlay(Window *window, Window *parent)
uint32_t window_modal(Window *window, Window *parent)
void window_stop_modal(Window *window, const uint32_t return_value)
void window_hotkey(Window *window, const vkey_t key, const uint32_t modifiers, Listener *listener)
void window_clear_hotkeys(Window *window)
void window_cycle_tabstop(Window *window, const bool_t cycle)
gui_focus_t window_next_tabstop(Window *window)
gui_focus_t window_previous_tabstop(Window *window)
gui_focus_t window_focus(Window *window, GuiControl *control)
GuiControl *window_get_focus(Window *window)
void window_focus_info(const Window *window, FocusInfo *info)
void window_update(Window *window)
void window_origin(Window *window, const V2Df origin)
void window_size(Window *window, const S2Df size)
V2Df window_get_origin(const Window *window)
S2Df window_get_size(const Window *window)
S2Df window_get_client_size(const Window *window)
R2Df window_control_frame(const Window *window, const GuiControl *control)
V2Df window_client_to_screen(const Window *window, const V2Df point)
void window_defbutton(Window *window, Button *button)
void window_cursor(Window *window, const gui_cursor_t cursor, const Image *image, const real32_t hot_x, const real32_t hot_y)
void *window_imp(const Window *window)


<comment>
view.h
</comment>


View *view_create(void)
View *view_scroll(void)
View *view_custom(const bool_t scroll, const bool_t border)
void view_data_imp(View *view, void **data, FPtr_destroy func_destroy_data)
void *view_get_data_imp(const View *view)
void view_size(View *view, const S2Df size)
void view_OnDraw(View *view, Listener *listener)
void view_OnOverlay(View *view, Listener *listener)
void view_OnSize(View *view, Listener *listener)
void view_OnEnter(View *view, Listener *listener)
void view_OnExit(View *view, Listener *listener)
void view_OnMove(View *view, Listener *listener)
void view_OnDown(View *view, Listener *listener)
void view_OnUp(View *view, Listener *listener)
void view_OnClick(View *view, Listener *listener)
void view_OnDrag(View *view, Listener *listener)
void view_OnWheel(View *view, Listener *listener)
void view_OnKeyDown(View *view, Listener *listener)
void view_OnKeyUp(View *view, Listener *listener)
void view_OnFocus(View *view, Listener *listener)
void view_OnResignFocus(View *view, Listener *listener)
void view_OnAcceptFocus(View *view, Listener *listener)
void view_OnScroll(View *view, Listener *listener)
void view_keybuf(View *view, KeyBuf *buffer)
void view_get_size(const View *view, S2Df *size)
void view_content_size(View *view, const S2Df size, const S2Df line)
void view_scroll_x(View *view, const real32_t pos)
void view_scroll_y(View *view, const real32_t pos)
void view_scroll_size(const View *view, real32_t *width, real32_t *height)
void view_scroll_visible(View *view, const bool_t horizontal, const bool_t vertical)
void view_viewport(const View *view, V2Df *pos, S2Df *size)
void view_point_scale(const View *view, real32_t *scale)
void view_update(View *view)
void *view_native(View *view)

<comment>
updown.h
</comment>


UpDown *updown_create(void)
void updown_OnClick(UpDown *updown, Listener *listener)
void updown_tooltip(UpDown *updown, const char_t *text)

<comment>
textview.h
</comment>


TextView *textview_create(void)
void textview_OnFilter(TextView *view, Listener *listener)
void textview_OnFocus(TextView *view, Listener *listener)
void textview_size(TextView *view, const S2Df size)
void textview_clear(TextView *view)
<comment>
uint32_t textview_printf(TextView *view, const char_t *format, ...)
</comment>
void textview_writef(TextView *view, const char_t *text)
void textview_rtf(TextView *view, Stream *rtf_in)
void textview_units(TextView *view, const uint32_t units)
void textview_family(TextView *view, const char_t *family)
void textview_fsize(TextView *view, const real32_t size)
void textview_fstyle(TextView *view, const uint32_t fstyle)
void textview_color(TextView *view, const color_t color)
void textview_bgcolor(TextView *view, const color_t color)
void textview_pgcolor(TextView *view, const color_t color)
void textview_halign(TextView *view, const align_t align)
void textview_lspacing(TextView *view, const real32_t scale)
void textview_bfspace(TextView *view, const real32_t space)
void textview_afspace(TextView *view, const real32_t space)
void textview_scroll_visible(TextView *view, const bool_t horizontal, const bool_t vertical)
void textview_editable(TextView *view, const bool_t is_editable)
void textview_select(TextView *view, const int32_t start, const int32_t end)
void textview_scroll_caret(TextView *view)
const char_t *textview_get_text(const TextView *view)
void textview_copy(const TextView *view)
void textview_cut(TextView *view)
void textview_paste(TextView *view)


<comment>
tableview.h
</comment>


TableView *tableview_create(void)
void tableview_OnData(TableView *view, Listener *listener)
void tableview_OnSelect(TableView *view, Listener *listener)
void tableview_OnRowClick(TableView *view, Listener *listener)
void tableview_OnHeaderClick(TableView *view, Listener *listener)
void tableview_font(TableView *view, const Font *font)
void tableview_size(TableView *view, S2Df size)
uint32_t tableview_new_column_text(TableView *view)
void tableview_column_width(TableView *view, const uint32_t column_id, const real32_t width)
void tableview_column_limits(TableView *view, const uint32_t column_id, const real32_t min, const real32_t max)
void tableview_column_resizable(TableView *view, const uint32_t column_id, const bool_t resizable)
void tableview_column_freeze(TableView *view, const uint32_t last_column_id)
void tableview_header_title(TableView *view, const uint32_t column_id, const char_t *text)
void tableview_header_align(TableView *view, const uint32_t column_id, const align_t align)
void tableview_header_indicator(TableView *view, const uint32_t column_id, const uint32_t indicator)
void tableview_header_visible(TableView *view, const bool_t visible)
void tableview_header_clickable(TableView *view, const bool_t clickable)
void tableview_header_resizable(TableView *view, const bool_t resizable)
void tableview_header_height(TableView *view, const real32_t height)
void tableview_row_height(TableView *view, const real32_t height)
void tableview_hkey_scroll(TableView *view, const bool_t force_column, const real32_t scroll)
void tableview_multisel(TableView *view, const bool_t multisel, const bool_t preserve)
void tableview_grid(TableView *view, const bool_t hlines, const bool_t vlines)
void tableview_update(TableView *view)
void tableview_select(TableView *view, const uint32_t *rows, const uint32_t n)
void tableview_deselect(TableView *view, const uint32_t *rows, const uint32_t n)
void tableview_deselect_all(TableView *view)
<comment>
const ArrSt(uint32_t) *tableview_selected(const TableView *view)
</comment>
void tableview_focus_row(TableView *view, const uint32_t row, const align_t align)
uint32_t tableview_get_focus_row(const TableView *view)
void tableview_scroll_visible(TableView *view, const bool_t horizontal, const bool_t vertical)

<comment>
splitview.h
</comment>


SplitView *splitview_horizontal(void)
SplitView *splitview_vertical(void)
void splitview_size(SplitView *split, const S2Df size)
void splitview_view(SplitView *split, View *view, const bool_t tabstop)
void splitview_text(SplitView *split, TextView *view, const bool_t tabstop)
void splitview_split(SplitView *split, SplitView *child)
void splitview_panel(SplitView *split, Panel *panel)
void splitview_pos(SplitView *split, const real32_t pos)

<comment>
slider.h
</comment>


Slider *slider_create(void)
Slider *slider_vertical(void)
void slider_OnMoved(Slider *slider, Listener *listener)
void slider_tooltip(Slider *slider, const char_t *text)
void slider_steps(Slider *slider, const uint32_t steps)
void slider_value(Slider *slider, const real32_t value)
real32_t slider_get_value(const Slider *slider)

<comment>
res_gui.h
</comment>

ResPack *res_gui_respack(const char_t *locale)

<comment>
progress.h
</comment>


Progress *progress_create(void)
void progress_undefined(Progress *progress, const bool_t running)
void progress_value(Progress *progress, const real32_t value)

<comment>
popup.h
</comment>


PopUp *popup_create(void)
void popup_OnSelect(PopUp *popup, Listener *listener)
void popup_tooltip(PopUp *popup, const char_t *text)
void popup_add_elem(PopUp *popup, const char_t *text, const Image *image)
void popup_set_elem(PopUp *popup, const uint32_t index, const char_t *text, const Image *image)
void popup_clear(PopUp *popup)
uint32_t popup_count(const PopUp *popup)
void popup_list_height(PopUp *popup, const uint32_t elems)
void popup_selected(PopUp *popup, const uint32_t index)
uint32_t popup_get_selected(const PopUp *popup)
const char_t *popup_get_text(const PopUp *popup, const uint32_t index)


<comment>
panel.h
</comment>


Panel *panel_create(void)
Panel *panel_scroll(const bool_t hscroll, const bool_t vscroll)
Panel *panel_custom(const bool_t hscroll, const bool_t vscroll, const bool_t border)
void panel_data_imp(Panel *panel, void **data, FPtr_destroy func_destroy_data)
void *panel_get_data_imp(const Panel *panel)
void panel_size(Panel *panel, const S2Df size)
uint32_t panel_layout(Panel *panel, Layout *layout)
Layout *panel_get_layout(Panel *panel, const uint32_t index)
void panel_visible_layout(Panel *panel, const uint32_t index)
void panel_update(Panel *panel)
real32_t panel_scroll_width(const Panel *panel)
real32_t panel_scroll_height(const Panel *panel)

<comment>
menuitem.h
</comment>


MenuItem *menuitem_create(void)
MenuItem *menuitem_separator(void)
void menuitem_OnClick(MenuItem *item, Listener *listener)
void menuitem_enabled(MenuItem *item, const bool_t enabled)
void menuitem_visible(MenuItem *item, const bool_t visible)
void menuitem_text(MenuItem *item, const char_t *text)
void menuitem_image(MenuItem *item, const Image *image)
void menuitem_key(MenuItem *item, const vkey_t key, const uint32_t modifiers)
void menuitem_submenu(MenuItem *item, Menu **submenu)
void menuitem_state(MenuItem *item, const gui_state_t state)


<comment>
menu.h
</comment>


Menu *menu_create(void)
void menu_destroy(Menu **menu)
void menu_item(Menu *menu, MenuItem *item)
void menu_launch(Menu *menu, const V2Df position)
void menu_hide(Menu *menu)
void menu_off_items(Menu *menu)
MenuItem *menu_get_item(Menu *menu, const uint32_t index)
uint32_t menu_size(const Menu *menu)
void *menu_imp(const Menu *menu)

<comment>
listbox.h
</comment>


ListBox *listbox_create(void)
void listbox_OnDown(ListBox *listbox, Listener *listener)
void listbox_OnSelect(ListBox *listbox, Listener *listener)
void listbox_size(ListBox *listbox, S2Df size)
void listbox_checkbox(ListBox *listbox, const bool_t show)
void listbox_multisel(ListBox *listbox, const bool_t multisel)
void listbox_add_elem(ListBox *listbox, const char_t *text, const Image *image)
void listbox_set_elem(ListBox *listbox, const uint32_t index, const char_t *text, const Image *image)
void listbox_clear(ListBox *listbox)
void listbox_color(ListBox *listbox, const uint32_t index, const color_t color)
void listbox_select(ListBox *listbox, const uint32_t index, const bool_t select)
void listbox_check(ListBox *listbox, const uint32_t index, const bool_t check)
uint32_t listbox_count(const ListBox *listbox)
const char_t *listbox_text(const ListBox *listbox, const uint32_t index)
bool_t listbox_selected(const ListBox *listbox, uint32_t index)
bool_t listbox_checked(const ListBox *listbox, uint32_t index)


<comment>
layout.h
</comment>

Layout *layout_create(const uint32_t ncols, const uint32_t nrows)
Cell *layout_cell(Layout *layout, const uint32_t col, const uint32_t row)
GuiControl *layout_control(Layout *layout, const uint32_t col, const uint32_t row)
void layout_label(Layout *layout, Label *label, const uint32_t col, const uint32_t row)
void layout_button(Layout *layout, Button *button, const uint32_t col, const uint32_t row)
void layout_popup(Layout *layout, PopUp *popup, const uint32_t col, const uint32_t row)
void layout_edit(Layout *layout, Edit *edit, const uint32_t col, const uint32_t row)
void layout_combo(Layout *layout, Combo *combo, const uint32_t col, const uint32_t row)
void layout_listbox(Layout *layout, ListBox *list, const uint32_t col, const uint32_t row)
void layout_updown(Layout *layout, UpDown *updown, const uint32_t col, const uint32_t row)
void layout_slider(Layout *layout, Slider *slider, const uint32_t col, const uint32_t row)
void layout_progress(Layout *layout, Progress *progress, const uint32_t col, const uint32_t row)
void layout_view(Layout *layout, View *view, const uint32_t col, const uint32_t row)
void layout_textview(Layout *layout, TextView *view, const uint32_t col, const uint32_t row)
void layout_imageview(Layout *layout, ImageView *view, const uint32_t col, const uint32_t row)
void layout_tableview(Layout *layout, TableView *view, const uint32_t col, const uint32_t row)
void layout_splitview(Layout *layout, SplitView *view, const uint32_t col, const uint32_t row)
void layout_panel(Layout *layout, Panel *panel, const uint32_t col, const uint32_t row)
void layout_panel_replace(Layout *layout, Panel *panel, const uint32_t col, const uint32_t row)
void layout_layout(Layout *layout, Layout *sublayout, const uint32_t col, const uint32_t row)
Label *layout_get_label(Layout *layout, const uint32_t col, const uint32_t row)
Button *layout_get_button(Layout *layout, const uint32_t col, const uint32_t row)
PopUp *layout_get_popup(Layout *layout, const uint32_t col, const uint32_t row)
Edit *layout_get_edit(Layout *layout, const uint32_t col, const uint32_t row)
Combo *layout_get_combo(Layout *layout, const uint32_t col, const uint32_t row)
ListBox *layout_get_listbox(Layout *layout, const uint32_t col, const uint32_t row)
UpDown *layout_get_updown(Layout *layout, const uint32_t col, const uint32_t row)
Slider *layout_get_slider(Layout *layout, const uint32_t col, const uint32_t row)
Progress *layout_get_progress(Layout *layout, const uint32_t col, const uint32_t row)
View *layout_get_view(Layout *layout, const uint32_t col, const uint32_t row)
TextView *layout_get_textview(Layout *layout, const uint32_t col, const uint32_t row)
ImageView *layout_get_imageview(Layout *layout, const uint32_t col, const uint32_t row)
TableView *layout_get_tableview(Layout *layout, const uint32_t col, const uint32_t row)
SplitView *layout_get_splitview(Layout *layout, const uint32_t col, const uint32_t row)
Panel *layout_get_panel(Layout *layout, const uint32_t col, const uint32_t row)
Layout *layout_get_layout(Layout *layout, const uint32_t col, const uint32_t row)
uint32_t layout_ncols(const Layout *layout)
uint32_t layout_nrows(const Layout *layout)
void layout_insert_col(Layout *layout, const uint32_t col)
void layout_insert_row(Layout *layout, const uint32_t row)
void layout_remove_col(Layout *layout, const uint32_t col)
void layout_remove_row(Layout *layout, const uint32_t row)
void layout_taborder(Layout *layout, const gui_orient_t order)
void layout_tabstop(Layout *layout, const uint32_t col, const uint32_t row, const bool_t tabstop)
void layout_hsize(Layout *layout, const uint32_t col, const real32_t width)
void layout_vsize(Layout *layout, const uint32_t row, const real32_t height)
void layout_hmargin(Layout *layout, const uint32_t col, const real32_t margin)
void layout_vmargin(Layout *layout, const uint32_t row, const real32_t margin)
void layout_hexpand(Layout *layout, const uint32_t col)
void layout_hexpand2(Layout *layout, const uint32_t col1, const uint32_t col2, const real32_t exp)
void layout_hexpand3(Layout *layout, const uint32_t col1, const uint32_t col2, const uint32_t col3, const real32_t exp1, const real32_t exp2)
void layout_vexpand(Layout *layout, const uint32_t row)
void layout_vexpand2(Layout *layout, const uint32_t row1, const uint32_t row2, const real32_t exp)
void layout_vexpand3(Layout *layout, const uint32_t row1, const uint32_t row2, const uint32_t row3, const real32_t exp1, const real32_t exp2)
void layout_halign(Layout *layout, const uint32_t col, const uint32_t row, const align_t align)
void layout_valign(Layout *layout, const uint32_t col, const uint32_t row, const align_t align)
void layout_show_col(Layout *layout, const uint32_t col, const bool_t visible)
void layout_show_row(Layout *layout, const uint32_t row, const bool_t visible)
void layout_margin(Layout *layout, const real32_t mall)
void layout_margin2(Layout *layout, const real32_t mtb, const real32_t mlr)
void layout_margin4(Layout *layout, const real32_t mt, const real32_t mr, const real32_t mb, const real32_t ml)
void layout_bgcolor(Layout *layout, const color_t color)
void layout_skcolor(Layout *layout, const color_t color)
void layout_update(const Layout *layout)
void layout_dbind_imp(Layout *layout, Listener *listener, const char_t *type, const uint16_t size)
void layout_dbind_obj_imp(Layout *layout, void *obj, const char_t *type)
void layout_dbind_update_imp(Layout *layout, const char_t *type, const uint16_t size, const char_t *mname, const char_t *mtype, const uint16_t moffset, const uint16_t msize)


<comment>
label.h
</comment>


Label *label_create(void)
Label *label_multiline(void)
void label_OnClick(Label *label, Listener *listener)
void label_text(Label *label, const char_t *text)
void label_size_text(Label *label, const char_t *text)
void label_font(Label *label, const Font *font)
void label_style_over(Label *label, const uint32_t fstyle)
void label_align(Label *label, const align_t align)
void label_color(Label *label, const color_t color)
void label_color_over(Label *label, const color_t color)
void label_bgcolor(Label *label, const color_t color)
void label_bgcolor_over(Label *label, const color_t color)

<comment>
imageview.h
</comment>


ImageView *imageview_create(void)
void imageview_size(ImageView *view, S2Df size)
void imageview_scale(ImageView *view, const gui_scale_t scale)
void imageview_image(ImageView *view, const Image *image)
void imageview_OnClick(ImageView *view, Listener *listener)
void imageview_OnOverDraw(ImageView *view, Listener *listener)

<comment>
guicontrol.h
</comment>


Label *guicontrol_label(GuiControl *control)
Button *guicontrol_button(GuiControl *control)
PopUp *guicontrol_popup(GuiControl *control)
Edit *guicontrol_edit(GuiControl *control)
Combo *guicontrol_combo(GuiControl *control)
ListBox *guicontrol_listbox(GuiControl *control)
UpDown *guicontrol_updown(GuiControl *control)
Slider *guicontrol_slider(GuiControl *control)
Progress *guicontrol_progress(GuiControl *control)
View *guicontrol_view(GuiControl *control)
TextView *guicontrol_textview(GuiControl *control)
ImageView *guicontrol_imageview(GuiControl *control)
TableView *guicontrol_tableview(GuiControl *control)
SplitView *guicontrol_splitview(GuiControl *control)
Panel *guicontrol_panel(GuiControl *control)
void guicontrol_tag(GuiControl *control, const uint32_t tag)
uint32_t guicontrol_get_tag(const GuiControl *control)


<comment>
gui.h
</comment>


void gui_start(void)
void gui_finish(void)
void gui_respack(FPtr_respack func_respack)
void gui_language(const char_t *lang)
const char_t *gui_text(const ResId id)
const Image *gui_image(const ResId id)
const byte_t *gui_file(const ResId id, uint32_t *size)
bool_t gui_dark_mode(void)
color_t gui_alt_color(const color_t light_color, const color_t dark_color)
color_t gui_label_color(void)
color_t gui_view_color(void)
color_t gui_line_color(void)
color_t gui_link_color(void)
color_t gui_border_color(void)
S2Df gui_resolution(void)
V2Df gui_mouse_pos(void)
void gui_update(void)
void gui_OnThemeChanged(Listener *listener)
void gui_update_transitions(const real64_t prtime, const real64_t crtime)
void gui_OnNotification(Listener *listener)
void gui_OnIdle(Listener *listener)
uint32_t gui_info_window(const bool_t fatal, const char_t *msg, const char_t *caption, const char_t *detail, const char_t *file, const uint32_t line, const ArrPt(String) *buttons, const uint32_t defindex)
void *evbind_object_imp(Event *e, const char_t *type)
bool_t evbind_modify_imp(Event *e, const char_t *type, const uint16_t size, const char_t *mname, const char_t *mtype, const uint16_t moffset, const uint16_t msize)

<comment>
globals.h
</comment>


device_t globals_device(void)
void globals_resolution(S2Df *resolution)
V2Df globals_mouse_position(void)

<comment>
edit.h
</comment>


Edit *edit_create(void)
Edit *edit_multiline(void)
void edit_OnFilter(Edit *edit, Listener *listener)
void edit_OnChange(Edit *edit, Listener *listener)
void edit_OnFocus(Edit *edit, Listener *listener)
void edit_text(Edit *edit, const char_t *text)
void edit_font(Edit *edit, const Font *font)
void edit_align(Edit *edit, const align_t align)
void edit_passmode(Edit *edit, const bool_t passmode)
void edit_editable(Edit *edit, const bool_t is_editable)
void edit_autoselect(Edit *edit, const bool_t autoselect)
void edit_select(Edit *edit, const int32_t start, const int32_t end)
void edit_tooltip(Edit *edit, const char_t *text)
void edit_color(Edit *edit, const color_t color)
void edit_color_focus(Edit *edit, const color_t color)
void edit_bgcolor(Edit *edit, const color_t color)
void edit_bgcolor_focus(Edit *edit, const color_t color)
void edit_phtext(Edit *edit, const char_t *text)
void edit_phcolor(Edit *edit, const color_t color)
void edit_phstyle(Edit *edit, const uint32_t fstyle)
void edit_vpadding(Edit *edit, const real32_t padding)
const char_t *edit_get_text(const Edit *edit)
real32_t edit_get_height(const Edit *edit)
void edit_copy(const Edit *edit)
void edit_cut(Edit *edit)
void edit_paste(Edit *edit)

<comment>
comwin.h
</comment>


const char_t *comwin_open_file(Window *parent, const char_t **ftypes, const uint32_t size, const char_t *start_dir)
const char_t *comwin_save_file(Window *parent, const char_t **ftypes, const uint32_t size, const char_t *start_dir)
void comwin_color(Window *parent, const char_t *title, const real32_t x, const real32_t y, const align_t halign, const align_t valign, const color_t current, color_t *colors, const uint32_t n, Listener *OnChange)


<comment>
combo.h
</comment>


Combo *combo_create(void)
void combo_OnFilter(Combo *combo, Listener *listener)
void combo_OnChange(Combo *combo, Listener *listener)
void combo_text(Combo *combo, const char_t *text)
void combo_align(Combo *combo, const align_t align)
void combo_tooltip(Combo *combo, const char_t *text)
void combo_color(Combo *combo, const color_t color)
void combo_color_focus(Combo *combo, const color_t color)
void combo_bgcolor(Combo *combo, const color_t color)
void combo_bgcolor_focus(Combo *combo, const color_t color)
void combo_phtext(Combo *combo, const char_t *text)
void combo_phcolor(Combo *combo, const color_t color)
void combo_phstyle(Combo *combo, const uint32_t fstyle)
const char_t *combo_get_text(const Combo *combo, const uint32_t index)
uint32_t combo_count(const Combo *combo)
void combo_add_elem(Combo *combo, const char_t *text, const Image *image)
void combo_set_elem(Combo *combo, const uint32_t index, const char_t *text, const Image *image)
void combo_ins_elem(Combo *combo, const uint32_t index, const char_t *text, const Image *image)
void combo_del_elem(Combo *combo, const uint32_t index)
void combo_duplicates(Combo *combo, const bool_t duplicates)


<comment>
cell.h
</comment>


bool_t cell_empty(Cell *cell)
GuiControl *cell_control(Cell *cell)
Label *cell_label(Cell *cell)
Button *cell_button(Cell *cell)
PopUp *cell_popup(Cell *cell)
Edit *cell_edit(Cell *cell)
Combo *cell_combo(Cell *cell)
ListBox *cell_listbox(Cell *cell)
UpDown *cell_updown(Cell *cell)
Slider *cell_slider(Cell *cell)
Progress *cell_progress(Cell *cell)
View *cell_view(Cell *cell)
TextView *cell_textview(Cell *cell)
ImageView *cell_imageview(Cell *cell)
TableView *cell_tableview(Cell *cell)
SplitView *cell_splitview(Cell *cell)
Panel *cell_panel(Cell *cell)
Layout *cell_layout(Cell *cell)
void cell_enabled(Cell *cell, const bool_t enabled)
void cell_visible(Cell *cell, const bool_t visible)
void cell_padding(Cell *cell, const real32_t pall)
void cell_padding2(Cell *cell, const real32_t ptb, const real32_t plr)
void cell_padding4(Cell *cell, const real32_t pt, const real32_t pr, const real32_t pb, const real32_t pl)
void cell_dbind_imp(Cell *cell,const char_t *type,const uint16_t size,const char_t *mname,const char_t *mtype,const uint16_t moffset,const uint16_t msize)

<comment>
button.h
</comment>


Button *button_push(void)
Button *button_check(void)
Button *button_check3(void)
Button *button_radio(void)
Button *button_flat(void)
Button *button_flatgle(void)
void button_OnClick(Button *button, Listener *listener)
void button_text(Button *button, const char_t *text)
void button_text_alt(Button *button, const char_t *text)
void button_tooltip(Button *button, const char_t *text)
void button_font(Button *button, const Font *font)
void button_image(Button *button, const Image *image)
void button_image_alt(Button *button, const Image *image)
void button_state(Button *button, const gui_state_t state)
void button_tag(Button *button, const uint32_t tag)
void button_vpadding(Button *button, const real32_t padding)
gui_state_t button_get_state(const Button *button)
uint32_t button_get_tag(const Button *button)
real32_t button_get_height(const Button *button)

<comment>
v2d.h 
</comment>


V2Df v2df(const real32_t x, const real32_t y)
V2Dd v2dd(const real64_t x, const real64_t y)
V2Df v2d_tof(const V2Dd *v)
V2Dd v2d_tod(const V2Df *v)
void v2d_tofn(V2Df *vf, const V2Dd *vd, const uint32_t n)
void v2d_todn(V2Dd *vd, const V2Df *vf, const uint32_t n)
V2Df v2d_addf(const V2Df *v1, const V2Df *v2)
V2Dd v2d_addd(const V2Dd *v1, const V2Dd *v2)
V2Df v2d_subf(const V2Df *v1, const V2Df *v2)
V2Dd v2d_subd(const V2Dd *v1, const V2Dd *v2)
V2Df v2d_mulf(const V2Df *v, const real32_t s)
V2Dd v2d_muld(const V2Dd *v, const real64_t s)
V2Df v2d_fromf(const V2Df *v, const V2Df *dir, const real32_t length)
V2Dd v2d_fromd(const V2Dd *v, const V2Dd *dir, const real64_t length)
V2Df v2d_midf(const V2Df *v1, const V2Df *v2)
V2Dd v2d_midd(const V2Dd *v1, const V2Dd *v2)
V2Df v2d_unitf(const V2Df *v1, const V2Df *v2, real32_t *dist)
V2Dd v2d_unitd(const V2Dd *v1, const V2Dd *v2, real64_t *dist)
V2Df v2d_unit_xyf(const real32_t x1, const real32_t y1, const real32_t x2, const real32_t y2, real32_t *dist)
V2Dd v2d_unit_xyd(const real64_t x1, const real64_t y1, const real64_t x2, const real64_t y2, real64_t *dist)
V2Df v2d_perp_posf(const V2Df *v)
V2Dd v2d_perp_posd(const V2Dd *v)
V2Df v2d_perp_negf(const V2Df *v)
V2Dd v2d_perp_negd(const V2Dd *v)
V2Df v2d_from_anglef(const real32_t a)
V2Dd v2d_from_angled(const real64_t a)
bool_t v2d_normf(V2Df *v)
bool_t v2d_normd(V2Dd *v)
real32_t v2d_lengthf(const V2Df *v)
real64_t v2d_lengthd(const V2Dd *v)
real32_t v2d_sqlengthf(const V2Df *v)
real64_t v2d_sqlengthd(const V2Dd *v)
real32_t v2d_dotf(const V2Df *v1, const V2Df *v2)
real64_t v2d_dotd(const V2Dd *v1, const V2Dd *v2)
real32_t v2d_distf(const V2Df *v1, const V2Df *v2)
real64_t v2d_distd(const V2Dd *v1, const V2Dd *v2)
real32_t v2d_sqdistf(const V2Df *v1, const V2Df *v2)
real64_t v2d_sqdistd(const V2Dd *v1, const V2Dd *v2)
real32_t v2d_anglef(const V2Df *v1, const V2Df *v2)
real64_t v2d_angled(const V2Dd *v1, const V2Dd *v2)
void v2d_rotatef(V2Df *v, const real32_t a)
void v2d_rotated(V2Dd *v, const real64_t a)

<comment>
tri2d.h
</comment>

Tri2Df tri2df(const real32_t x0, const real32_t y0, const real32_t x1, const real32_t y1, const real32_t x2, const real32_t y2)
Tri2Dd tri2dd(const real64_t x0, const real64_t y0, const real64_t x1, const real64_t y1, const real64_t x2, const real64_t y2)
Tri2Df tri2d_vf(const V2Df *p0, const V2Df *p1, const V2Df *p2)
Tri2Dd tri2d_vd(const V2Dd *p0, const V2Dd *p1, const V2Dd *p2)
void tri2d_transformf(Tri2Df *tri, const T2Df *t2d)
void tri2d_transformd(Tri2Dd *tri, const T2Dd *t2d)
real32_t tri2d_areaf(const Tri2Df *tri)
real64_t tri2d_aread(const Tri2Dd *tri)
bool_t tri2d_ccwf(const Tri2Df *tri)
bool_t tri2d_ccwd(const Tri2Dd *tri)
V2Df tri2d_centroidf(const Tri2Df *tri)
V2Dd tri2d_centroidd(const Tri2Dd *tri)

<comment>
t2d.h
</comment>


void t2d_tof(T2Df *dest, const T2Dd *src)
void t2d_tod(T2Dd *dest, const T2Df *src)
void t2d_movef(T2Df *dest, const T2Df *src, const real32_t x, const real32_t y)
void t2d_moved(T2Dd *dest, const T2Dd *src, const real64_t x, const real64_t y)
void t2d_rotatef(T2Df *dest, const T2Df *src, const real32_t angle)
void t2d_rotated(T2Dd *dest, const T2Dd *src, const real64_t angle)
void t2d_scalef(T2Df *dest, const T2Df *src, const real32_t sx, const real32_t sy)
void t2d_scaled(T2Dd *dest, const T2Dd *src, const real64_t sx, const real64_t sy)
void t2d_invfastf(T2Df *dest, const T2Df *src)
void t2d_invfastd(T2Dd *dest, const T2Dd *src)
void t2d_inversef(T2Df *dest, const T2Df *src)
void t2d_inversed(T2Dd *dest, const T2Dd *src)
void t2d_multf(T2Df *dest, const T2Df *src1, const T2Df *src2)
void t2d_multd(T2Dd *dest, const T2Dd *src1, const T2Dd *src2)
void t2d_vmultf(V2Df *dest, const T2Df *t2d, const V2Df *src)
void t2d_vmultd(V2Dd *dest, const T2Dd *t2d, const V2Dd *src)
void t2d_vmultnf(V2Df *dest, const T2Df *t2d, const V2Df *src, const uint32_t n)
void t2d_vmultnd(V2Dd *dest, const T2Dd *t2d, const V2Dd *src, const uint32_t n)
void t2d_decomposef(const T2Df *t2d, V2Df *pos, real32_t *angle, V2Df *sc)
void t2d_decomposed(const T2Dd *t2d, V2Dd *pos, real64_t *angle, V2Dd *sc)

<comment>
seg2d.h
</comment>


Seg2Df seg2df(const real32_t x0, const real32_t y0, const real32_t x1, const real32_t y1)
Seg2Dd seg2dd(const real64_t x0, const real64_t y0, const real64_t x1, const real64_t y1)
Seg2Df seg2d_vf(const V2Df *p0, const V2Df *p1)
Seg2Dd seg2d_vd(const V2Dd *p0, const V2Dd *p1)
real32_t seg2d_lengthf(const Seg2Df *seg)
real64_t seg2d_lengthd(const Seg2Dd *seg)
real32_t seg2d_sqlengthf(const Seg2Df *seg)
real64_t seg2d_sqlengthd(const Seg2Dd *seg)
V2Df seg2d_evalf(const Seg2Df *seg, const real32_t t)
V2Dd seg2d_evald(const Seg2Dd *seg, const real64_t t)
real32_t seg2d_close_paramf(const Seg2Df *seg, const V2Df *pnt)
real64_t seg2d_close_paramd(const Seg2Dd *seg, const V2Dd *pnt)
real32_t seg2d_point_sqdistf(const Seg2Df *seg, const V2Df *pnt, real32_t *t)
real64_t seg2d_point_sqdistd(const Seg2Dd *seg, const V2Dd *pnt, real64_t *t)
real32_t seg2d_sqdistf(const Seg2Df *seg1, const Seg2Df *seg2, real32_t *t1, real32_t *t2)
real64_t seg2d_sqdistd(const Seg2Dd *seg1, const Seg2Dd *seg2, real64_t *t1, real64_t *t2)

<comment>
s2d.h
<comment>

S2Df s2df(const real32_t width, const real32_t height)
S2Df s2di(const uint32_t width, const uint32_t height)
S2Dd s2dd(const real64_t width, const real64_t height)

<comment>
r2d.h
</comment>

R2Df r2df(const real32_t x, const real32_t y, const real32_t width, const real32_t height)
R2Dd r2dd(const real64_t x, const real64_t y, const real64_t width, const real64_t height)
V2Df r2d_centerf(const R2Df *r2d)
V2Dd r2d_centerd(const R2Dd *r2d)
bool_t r2d_collidef(const R2Df *r2d1, const R2Df *r2d2)
bool_t r2d_collided(const R2Dd *r2d1, const R2Dd *r2d2)
bool_t r2d_containsf(const R2Df *r2d, const real32_t x, const real32_t y)
bool_t r2d_containsd(const R2Dd *r2d, const real64_t x, const real64_t y)
bool_t r2d_clipf(const R2Df *viewport, const R2Df *r2d)
bool_t r2d_clipd(const R2Dd *viewport, const R2Dd *r2d)
void r2d_joinf(R2Df *r2d, const R2Df *src)
void r2d_joind(R2Dd *r2d, const R2Dd *src)

<comment>
pol2d.h
</comment>


Pol2Df *pol2d_createf(const V2Df *points, const uint32_t n)
Pol2Dd *pol2d_created(const V2Dd *points, const uint32_t n)
Pol2Df *pol2d_convex_hullf(const V2Df *points, const uint32_t n)
Pol2Dd *pol2d_convex_hulld(const V2Dd *points, const uint32_t n)
Pol2Df *pol2d_copyf(const Pol2Df *pol)
Pol2Dd *pol2d_copyd(const Pol2Dd *pol)
void pol2d_destroyf(Pol2Df **pol)
void pol2d_destroyd(Pol2Dd **pol)
void pol2d_transformf(Pol2Df *pol, const T2Df *t2d)
void pol2d_transformd(Pol2Dd *pol, const T2Dd *t2d)
const V2Df *pol2d_pointsf(const Pol2Df *pol)
const V2Dd *pol2d_pointsd(const Pol2Dd *pol)
uint32_t pol2d_nf(const Pol2Df *pol)
uint32_t pol2d_nd(const Pol2Dd *pol)
real32_t pol2d_areaf(const Pol2Df *pol)
real64_t pol2d_aread(const Pol2Dd *pol)
Box2Df pol2d_boxf(const Pol2Df *pol)
Box2Dd pol2d_boxd(const Pol2Dd *pol)
bool_t pol2d_ccwf(const Pol2Df *pol)
bool_t pol2d_ccwd(const Pol2Dd *pol)
bool_t pol2d_convexf(const Pol2Df *pol)
bool_t pol2d_convexd(const Pol2Dd *pol)
V2Df pol2d_centroidf(const Pol2Df *pol)
V2Dd pol2d_centroidd(const Pol2Dd *pol)
V2Df pol2d_visual_centerf(const Pol2Df *pol, const real32_t norm_tol)
V2Dd pol2d_visual_centerd(const Pol2Dd *pol, const real64_t norm_tol)
<comment>
ArrSt(Tri2Df) *pol2d_trianglesf(const Pol2Df *pol)
ArrSt(Tri2Dd) *pol2d_trianglesd(const Pol2Dd *pol)
ArrPt(Pol2Df) *pol2d_convex_partitionf(const Pol2Df *pol)
ArrPt(Pol2Dd) *pol2d_convex_partitiond(const Pol2Dd *pol)
</comment>

<comment>
obb2d.h
</comment>


OBB2Df *obb2d_createf(const V2Df *center, const real32_t width, const real32_t height, const real32_t angle)
OBB2Dd *obb2d_created(const V2Dd *center, const real64_t width, const real64_t height, const real64_t angle)
OBB2Df *obb2d_from_linef(const V2Df *p0, const V2Df *p1, const real32_t thickness)
OBB2Dd *obb2d_from_lined(const V2Dd *p0, const V2Dd *p1, const real64_t thickness)
OBB2Df *obb2d_from_pointsf(const V2Df *p, const uint32_t n)
OBB2Dd *obb2d_from_pointsd(const V2Dd *p, const uint32_t n)
OBB2Df *obb2d_copyf(const OBB2Df *obb)
OBB2Dd *obb2d_copyd(const OBB2Dd *obb)
void obb2d_destroyf(OBB2Df **obb)
void obb2d_destroyd(OBB2Dd **obb)
void obb2d_updatef(OBB2Df *obb, const V2Df *center, const real32_t width, const real32_t height, const real32_t angle)
void obb2d_updated(OBB2Dd *obb, const V2Dd *center, const real64_t width, const real64_t height, const real64_t angle)
void obb2d_movef(OBB2Df *obb, const real32_t offset_x, const real32_t offset_y)
void obb2d_moved(OBB2Dd *obb, const real64_t offset_x, const real64_t offset_y)
void obb2d_transformf(OBB2Df *obb, const T2Df *t2d)
void obb2d_transformd(OBB2Dd *obb, const T2Dd *t2d)
const V2Df *obb2d_cornersf(const OBB2Df *obb)
const V2Dd *obb2d_cornersd(const OBB2Dd *obb)
V2Df obb2d_centerf(const OBB2Df *obb)
V2Dd obb2d_centerd(const OBB2Dd *obb)
real32_t obb2d_widthf(const OBB2Df *obb)
real64_t obb2d_widthd(const OBB2Dd *obb)
real32_t obb2d_heightf(const OBB2Df *obb)
real64_t obb2d_heightd(const OBB2Dd *obb)
real32_t obb2d_anglef(const OBB2Df *obb)
real64_t obb2d_angled(const OBB2Dd *obb)
real32_t obb2d_areaf(const OBB2Df *obb)
real64_t obb2d_aread(const OBB2Dd *obb)
Box2Df obb2d_boxf(const OBB2Df *obb)
Box2Dd obb2d_boxd(const OBB2Dd *obb)

<comment>
col2d.h
</comment>


bool_t col2d_point_pointf(const V2Df *pnt1, const V2Df *pnt2, const real32_t tol, Col2Df *col)
bool_t col2d_point_pointd(const V2Dd *pnt1, const V2Dd *pnt2, const real64_t tol, Col2Dd *col)
bool_t col2d_segment_pointf(const Seg2Df *seg, const V2Df *pnt, const real32_t tol, Col2Df *col)
bool_t col2d_segment_pointd(const Seg2Dd *seg, const V2Dd *pnt, const real64_t tol, Col2Dd *col)
bool_t col2d_segment_segmentf(const Seg2Df *seg1, const Seg2Df *seg2, Col2Df *col)
bool_t col2d_segment_segmentd(const Seg2Dd *seg1, const Seg2Dd *seg2, Col2Dd *col)
bool_t col2d_circle_pointf(const Cir2Df *cir, const V2Df *pnt, Col2Df *col)
bool_t col2d_circle_pointd(const Cir2Dd *cir, const V2Dd *pnt, Col2Dd *col)
bool_t col2d_circle_segmentf(const Cir2Df *cir, const Seg2Df *seg, Col2Df *col)
bool_t col2d_circle_segmentd(const Cir2Dd *cir, const Seg2Dd *seg, Col2Dd *col)
bool_t col2d_circle_circlef(const Cir2Df *cir1, const Cir2Df *cir2, Col2Df *col)
bool_t col2d_circle_circled(const Cir2Dd *cir1, const Cir2Dd *cir2, Col2Dd *col)
bool_t col2d_box_pointf(const Box2Df *box, const V2Df *pnt, Col2Df *col)
bool_t col2d_box_pointd(const Box2Dd *box, const V2Dd *pnt, Col2Dd *col)
bool_t col2d_box_segmentf(const Box2Df *box, const Seg2Df *seg, Col2Df *col)
bool_t col2d_box_segmentd(const Box2Dd *box, const Seg2Dd *seg, Col2Df *col)
bool_t col2d_box_circlef(const Box2Df *box, const Cir2Df *cir, Col2Df *col)
bool_t col2d_box_circled(const Box2Dd *box, const Cir2Dd *cir, Col2Dd *col)
bool_t col2d_box_boxf(const Box2Df *box1, const Box2Df *box2, Col2Df *col)
bool_t col2d_box_boxd(const Box2Dd *box1, const Box2Dd *box2, Col2Dd *col)
bool_t col2d_obb_pointf(const OBB2Df *obb, const V2Df *pnt, Col2Df *col)
bool_t col2d_obb_pointd(const OBB2Dd *obb, const V2Dd *pnt, Col2Dd *col)
bool_t col2d_obb_segmentf(const OBB2Df *obb, const Seg2Df *seg, Col2Df *col)
bool_t col2d_obb_segmentd(const OBB2Dd *obb, const Seg2Dd *seg, Col2Dd *col)
bool_t col2d_obb_circlef(const OBB2Df *obb, const Cir2Df *cir, Col2Df *col)
bool_t col2d_obb_circled(const OBB2Dd *obb, const Cir2Dd *cir, Col2Dd *col)
bool_t col2d_obb_boxf(const OBB2Df *obb, const Box2Df *box, Col2Df *col)
bool_t col2d_obb_boxd(const OBB2Dd *obb, const Box2Dd *box, Col2Dd *col)
bool_t col2d_obb_obbf(const OBB2Df *obb1, const OBB2Df *obb2, Col2Df *col)
bool_t col2d_obb_obbd(const OBB2Dd *obb1, const OBB2Dd *obb2, Col2Dd *col)
bool_t col2d_tri_pointf(const Tri2Df *tri, const V2Df *pnt, Col2Df *col)
bool_t col2d_tri_pointd(const Tri2Dd *tri, const V2Dd *pnt, Col2Dd *col)
bool_t col2d_tri_segmentf(const Tri2Df *tri, const Seg2Df *seg, Col2Df *col)
bool_t col2d_tri_segmentd(const Tri2Dd *tri, const Seg2Dd *seg, Col2Dd *col)
bool_t col2d_tri_circlef(const Tri2Df *tri, const Cir2Df *cir, Col2Df *col)
bool_t col2d_tri_circled(const Tri2Dd *tri, const Cir2Df *cir, Col2Df *col)
bool_t col2d_tri_boxf(const Tri2Df *tri, const Box2Df *box, Col2Df *col)
bool_t col2d_tri_boxd(const Tri2Dd *tri, const Box2Df *box, Col2Df *col)
bool_t col2d_tri_obbf(const Tri2Df *tri, const OBB2Df *obb, Col2Df *col)
bool_t col2d_tri_obbd(const Tri2Dd *tri, const OBB2Dd *obb, Col2Dd *col)
bool_t col2d_tri_trif(const Tri2Df *tri1, const Tri2Df *tri2, Col2Df *col)
bool_t col2d_tri_trid(const Tri2Dd *tri1, const Tri2Dd *tri2, Col2Dd *col)
bool_t col2d_poly_pointf(const Pol2Df *poly, const V2Df *pnt, Col2Df *col)
bool_t col2d_poly_pointd(const Pol2Dd *poly, const V2Dd *pnt, Col2Dd *col)
bool_t col2d_poly_segmentf(const Pol2Df *poly, const Seg2Df *seg, Col2Df *col)
bool_t col2d_poly_segmentd(const Pol2Dd *poly, const Seg2Dd *seg, Col2Dd *col)
bool_t col2d_poly_circlef(const Pol2Df *poly, const Cir2Df *cir, Col2Df *col)
bool_t col2d_poly_circled(const Pol2Dd *poly, const Cir2Dd *cir, Col2Dd *col)
bool_t col2d_poly_boxf(const Pol2Df *poly, const Box2Df *box, Col2Df *col)
bool_t col2d_poly_boxd(const Pol2Dd *poly, const Box2Dd *box, Col2Dd *col)
bool_t col2d_poly_obbf(const Pol2Df *poly, const OBB2Df *obb, Col2Df *col)
bool_t col2d_poly_obbd(const Pol2Dd *poly, const OBB2Dd *obb, Col2Dd *col)
bool_t col2d_poly_trif(const Pol2Df *poly, const Tri2Df *tri, Col2Df *col)
bool_t col2d_poly_trid(const Pol2Dd *poly, const Tri2Dd *tri, Col2Dd *col)
bool_t col2d_poly_polyf(const Pol2Df *poly1, const Pol2Df *poly2, Col2Df *col)
bool_t col2d_poly_polyd(const Pol2Dd *poly1, const Pol2Dd *poly2, Col2Dd *col)

<comment>
cir2d.h
</comment>


Cir2Df cir2df(const real32_t x, const real32_t y, const real32_t r)
Cir2Dd cir2dd(const real64_t x, const real64_t y, const real64_t r)
Cir2Df cir2d_from_boxf(const Box2Df *box)
Cir2Dd cir2d_from_boxd(const Box2Dd *box)
Cir2Df cir2d_from_pointsf(const V2Df *p, const uint32_t n)
Cir2Dd cir2d_from_pointsd(const V2Dd *p, const uint32_t n)
Cir2Df cir2d_minimumf(const V2Df *p, const uint32_t n)
Cir2Dd cir2d_minimumd(const V2Dd *p, const uint32_t n)
real32_t cir2d_areaf(const Cir2Df *cir)
real64_t cir2d_aread(const Cir2Dd *cir)
bool_t cir2d_is_nullf(const Cir2Df *cir)
bool_t cir2d_is_nulld(const Cir2Dd *cir)

<comment>
box2d.h
</comment>


Box2Df box2df(const real32_t minX, const real32_t minY, const real32_t maxX, const real32_t maxY)
Box2Dd box2dd(const real64_t minX, const real64_t minY, const real64_t maxX, const real64_t maxY)
Box2Df box2d_from_pointsf(const V2Df *p, const uint32_t n)
Box2Dd box2d_from_pointsd(const V2Dd *p, const uint32_t n)
V2Df box2d_centerf(const Box2Df *box)
V2Dd box2d_centerd(const Box2Dd *box)
void box2d_addf(Box2Df *box, const V2Df *p)
void box2d_addd(Box2Dd *box, const V2Dd *p)
void box2d_addnf(Box2Df *box, const V2Df *p, const uint32_t n)
void box2d_addnd(Box2Dd *box, const V2Dd *p, const uint32_t n)
void box2d_add_circlef(Box2Df *box, const Cir2Df *cir)
void box2d_add_circled(Box2Dd *box, const Cir2Dd *cir)
void box2d_mergef(Box2Df *dest, const Box2Df *src)
void box2d_merged(Box2Dd *dest, const Box2Dd *src)
void box2d_segmentsf(const Box2Df *box, Seg2Df *segs)
void box2d_segmentsd(const Box2Dd *box, Seg2Dd *segs)
real32_t box2d_areaf(const Box2Df *box)
real64_t box2d_aread(const Box2Dd *box)
bool_t box2d_is_nullf(const Box2Df *box)
bool_t box2d_is_nulld(const Box2Dd *box)

<comment>
pixbuf.h
</comment>


Pixbuf *pixbuf_create(const uint32_t width, const uint32_t height, const pixformat_t format)
Pixbuf *pixbuf_copy(const Pixbuf *pixbuf)
Pixbuf *pixbuf_trim(const Pixbuf *pixbuf, const uint32_t x, const uint32_t y, const uint32_t width, const uint32_t height)
Pixbuf *pixbuf_convert(const Pixbuf *pixbuf, const Palette *palette, const pixformat_t oformat)
void pixbuf_destroy(Pixbuf **pixbuf)
pixformat_t pixbuf_format(const Pixbuf *pixbuf)
uint32_t pixbuf_width(const Pixbuf *pixbuf)
uint32_t pixbuf_height(const Pixbuf *pixbuf)
uint32_t pixbuf_size(const Pixbuf *pixbuf)
uint32_t pixbuf_dsize(const Pixbuf *pixbuf)
const byte_t *pixbuf_cdata(const Pixbuf *pixbuf)
byte_t *pixbuf_data(Pixbuf *pixbuf)
uint32_t pixbuf_format_bpp(const pixformat_t format)
uint32_t pixbuf_get(const Pixbuf *pixbuf, const uint32_t x, const uint32_t y)
void pixbuf_set(Pixbuf *pixbuf, const uint32_t x, const uint32_t y, const uint32_t value)

<comment>
palette.h
</comment>


Palette *palette_create(const uint32_t size)
Palette *palette_cga2(const bool_t mode, const bool_t intense)
Palette *palette_ega4(void)
Palette *palette_rgb8(void)
Palette *palette_gray1(void)
Palette *palette_gray2(void)
Palette *palette_gray4(void)
Palette *palette_gray8(void)
Palette *palette_binary(const color_t zero, const color_t one)
void palette_destroy(Palette **palette)
uint32_t palette_size(const Palette *palette)
color_t *palette_colors(Palette *palette)
const color_t *palette_ccolors(const Palette *palette)

<comment>
image.h
</comment>


Image *image_from_pixels(const uint32_t width, const uint32_t height, const pixformat_t format, const byte_t *data, const color_t *palette, const uint32_t palsize)
Image *image_from_pixbuf(const Pixbuf *pixbuf, const Palette *palette)
Image *image_from_file(const char_t *pathname, ferror_t *error)
Image *image_from_data(const byte_t *data, const uint32_t size)
const Image *image_from_resource(const ResPack *pack, const ResId id)
Image *image_copy(const Image *image)
Image *image_trim(const Image *image, const uint32_t x, const uint32_t y, const uint32_t width, const uint32_t height)
Image *image_rotate(const Image *image, const real32_t angle, const bool_t nsize, const color_t background, T2Df *t2d)
Image *image_scale(const Image *image, const uint32_t nwidth, const uint32_t nheight)
Image *image_read(Stream *stm)
bool_t image_to_file(const Image *image, const char_t *pathname, ferror_t *error)
void image_write(Stream *stream, const Image *image)
void image_destroy(Image **image)
pixformat_t image_format(const Image *image)
uint32_t image_width(const Image *image)
uint32_t image_height(const Image *image)
Pixbuf *image_pixels(const Image *image, const pixformat_t format)
bool_t image_codec(const Image *image, const codec_t codec)
codec_t image_get_codec(const Image *image)
uint32_t image_num_frames(const Image *image)
real32_t image_frame_length(const Image *image, const uint32_t findex)
void image_data_imp(Image *image, void **data, FPtr_destroy func_destroy_data)
void *image_get_data_imp(const Image *image)
const void *image_native(const Image *image)

<comment>
guictx.h
</comment>


GuiCtx *guictx_create(void)
GuiCtx *guictx_retain(const GuiCtx *context)
void guictx_destroy(GuiCtx **context)
void guictx_release(GuiCtx **context)
const GuiCtx *guictx_get_current(void)
void guictx_set_current(const GuiCtx *context)


<comment>
font.h
</comment>

Font *font_create(const char_t *family, const real32_t size, const uint32_t style)
Font *font_system(const real32_t size, const uint32_t style)
Font *font_monospace(const real32_t size, const uint32_t style)
Font *font_with_style(const Font *font, const uint32_t style)
Font *font_copy(const Font *font)
void font_destroy(Font **font)
bool_t font_equals(const Font *font1, const Font *font2)
real32_t font_regular_size(void)
real32_t font_small_size(void)
real32_t font_mini_size(void)
const char_t *font_family(const Font *font)
real32_t font_size(const Font *font)
real32_t font_height(const Font *font)
real32_t font_leading(const Font *font)
uint32_t font_style(const Font *font)
void font_extents(const Font *font, const char_t *text, const real32_t refwidth, real32_t *width, real32_t *height)
bool_t font_exists_family(const char_t *family)
<comment>
ArrPt(String) *font_installed_families(void)
</comment>
const void *font_native(const Font *font)

<comment>
drawg.h
</comment>

void draw_v2df(DCtx *ctx, const drawop_t op, const V2Df *v2d, const real32_t radius)
void draw_v2dd(DCtx *ctx, const drawop_t op, const V2Dd *v2d, const real64_t radius)
void draw_seg2df(DCtx *ctx, const Seg2Df *seg)
void draw_seg2dd(DCtx *ctx, const Seg2Dd *seg)
void draw_cir2df(DCtx *ctx, const drawop_t op, const Cir2Df *cir)
void draw_cir2dd(DCtx *ctx, const drawop_t op, const Cir2Dd *cir)
void draw_box2df(DCtx *ctx, const drawop_t op, const Box2Df *box)
void draw_box2dd(DCtx *ctx, const drawop_t op, const Box2Dd *box)
void draw_obb2df(DCtx *ctx, const drawop_t op, const OBB2Df *obb)
void draw_obb2dd(DCtx *ctx, const drawop_t op, const OBB2Dd *obb)
void draw_tri2df(DCtx *ctx, const drawop_t op, const Tri2Df *tri)
void draw_tri2dd(DCtx *ctx, const drawop_t op, const Tri2Dd *tri)
void draw_pol2df(DCtx *ctx, const drawop_t op, const Pol2Df *pol)
void draw_pol2dd(DCtx *ctx, const drawop_t op, const Pol2Dd *pol)

<comment>
draw2d.h
</comment>

void draw2d_start(void)
void draw2d_finish(void)

<comment>
draw.h
</comment>


void draw_line(DCtx *ctx, const real32_t x0, const real32_t y0, const real32_t x1, const real32_t y1)
void draw_polyline(DCtx *ctx, const bool_t closed, const V2Df *points, const uint32_t n)
void draw_arc(DCtx *ctx, const real32_t x, const real32_t y, const real32_t radius, const real32_t start, const real32_t sweep)
void draw_bezier(DCtx *ctx, const real32_t x0, const real32_t y0, const real32_t x1, const real32_t y1, const real32_t x2, const real32_t y2, const real32_t x3, const real32_t y3)
void draw_line_color(DCtx *ctx, const color_t color)
void draw_line_fill(DCtx *ctx)
void draw_line_width(DCtx *ctx, const real32_t width)
void draw_line_cap(DCtx *ctx, const linecap_t cap)
void draw_line_join(DCtx *ctx, const linejoin_t join)
void draw_line_dash(DCtx *ctx, const real32_t *pattern, const uint32_t n)
void draw_rect(DCtx *ctx, const drawop_t op, const real32_t x, const real32_t y, const real32_t width, const real32_t height)
void draw_rndrect(DCtx *ctx, const drawop_t op, const real32_t x, const real32_t y, const real32_t width, const real32_t height, const real32_t radius)
void draw_circle(DCtx *ctx, const drawop_t op, const real32_t x, const real32_t y, const real32_t radius)
void draw_ellipse(DCtx *ctx, const drawop_t op, const real32_t x, const real32_t y, const real32_t radx, const real32_t rady)
void draw_polygon(DCtx *ctx, const drawop_t op, const V2Df *points, const uint32_t n)
void draw_fill_color(DCtx *ctx, const color_t color)
void draw_fill_linear(DCtx *ctx, const color_t *color, const real32_t *stop, const uint32_t n, const real32_t x0, const real32_t y0, const real32_t x1, const real32_t y1)
void draw_fill_matrix(DCtx *ctx, const T2Df *t2d)
void draw_fill_wrap(DCtx *ctx, const fillwrap_t wrap)
void draw_font(DCtx *ctx, const Font *font)
void draw_text_color(DCtx *ctx, const color_t color)
void draw_text(DCtx *ctx, const char_t *text, const real32_t x, const real32_t y)
void draw_text_single_line(DCtx *ctx, const char_t *text, const real32_t x, const real32_t y)
void draw_text_path(DCtx *ctx, const drawop_t op, const char_t *text, const real32_t x, const real32_t y)
void draw_text_width(DCtx *ctx, const real32_t width)
void draw_text_trim(DCtx *ctx, const ellipsis_t ellipsis)
void draw_text_align(DCtx *ctx, const align_t halign, const align_t valign)
void draw_text_halign(DCtx *ctx, const align_t halign)
void draw_text_extents(DCtx *ctx, const char_t *text, const real32_t refwidth, real32_t *width, real32_t *height)
void draw_image(DCtx *ctx, const Image *image, const real32_t x, const real32_t y)
void draw_image_frame(DCtx *ctx, const Image *image, const uint32_t frame, const real32_t x, const real32_t y)
void draw_image_align(DCtx *ctx, const align_t halign, const align_t valign)

<comment>
dctxh.h
</comment>


DCtx *dctx_create(void)
void dctx_destroy(DCtx **ctx)
void dctx_set_gcontext(DCtx *ctx, void *gcontext, const uint32_t width, const uint32_t height, const real32_t offset_x, const real32_t offset_y, const uint32_t background, const bool_t reset)
void dctx_unset_gcontext(DCtx *ctx)
void dctx_set_flipped(DCtx *ctx, const bool_t flipped)
void dctx_size(const DCtx *ctx, uint32_t *width, uint32_t *height)
void dctx_offset(const DCtx *ctx, real32_t *offset_x, real32_t *offset_y)
void dctx_line_dash(const DCtx *ctx, real32_t *pattern, uint32_t *size)
real32_t dctx_text_width(const DCtx *ctx)
align_t dctx_text_intalign(const DCtx *ctx)
color_t dctx_text_color(const DCtx *ctx)
color_t dctx_line_color(const DCtx *ctx)
color_t dctx_background_color(const DCtx *ctx)
ellipsis_t dctx_text_trim(const DCtx *ctx)
void *dctx_native(DCtx *ctx)
void *dctx_internal_bitmap(DCtx *ctx)
void dctx_data_imp(DCtx *ctx, void *data, FPtr_destroy func_destroy_data)
void *dctx_get_data_imp(const DCtx *ctx)
void dctx_set_default_osfont(DCtx *ctx, const void *font)
void draw_set_raster_mode(DCtx *ctx)
void draw_text_raster(DCtx *ctx, const char_t *text, const real32_t x, const real32_t y)
<comment>
void draw_image_raster(DCtx *ctx, const Image *image, const real32_t x, const real32_t y)
</comment>
void draw_line_imp(DCtx *ctx, const real32_t x0, const real32_t y0, const real32_t x1, const real32_t y1, const bool_t raster)
void draw_rect_imp(DCtx *ctx, const drawop_t op, const real32_t x, const real32_t y, const real32_t width, const real32_t height, const bool_t raster)

<comment>
dctx.h
</comment>


DCtx *dctx_bitmap(const uint32_t width, const uint32_t height, const pixformat_t format)
Image *dctx_image(DCtx **ctx)
void draw_clear(DCtx *ctx, const color_t color)
void draw_matrixf(DCtx *ctx, const T2Df *t2d)
void draw_matrixd(DCtx *ctx, const T2Dd *t2d)
void draw_matrix_cartesianf(DCtx *ctx, const T2Df *t2d)
void draw_matrix_cartesiand(DCtx *ctx, const T2Dd *t2d)
void draw_antialias(DCtx *ctx, const bool_t on)

<comment>
color.h
</comment>


color_t color_rgb(const uint8_t r, const uint8_t g, const uint8_t b)
color_t color_rgba(const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a)
color_t color_rgbaf(const real32_t r, const real32_t g, const real32_t b, const real32_t a)
color_t color_hsbf(const real32_t hue, const real32_t sat, const real32_t bright)
color_t color_red(const uint8_t r)
color_t color_green(const uint8_t g)
color_t color_blue(const uint8_t b)
color_t color_gray(const uint8_t l)
color_t color_bgr(const uint32_t bgr)
color_t color_html(const char_t *html)
color_t color_indexed(const uint16_t index, const color_t color)
void color_to_hsbf(const color_t color, real32_t *hue, real32_t *sat, real32_t *bright)
void color_to_html(const color_t color, char_t *html, const uint32_t size)
void color_get_rgb(const color_t color, uint8_t *r, uint8_t *g, uint8_t *b)
void color_get_rgbf(const color_t color, real32_t *r, real32_t *g, real32_t *b)
void color_get_rgba(const color_t color, uint8_t *r, uint8_t *g, uint8_t *b, uint8_t *a)
void color_get_rgbaf(const color_t color, real32_t *r, real32_t *g, real32_t *b, real32_t *a)
uint8_t color_get_alpha(const color_t color)
color_t color_set_alpha(const color_t color, const uint8_t alpha)


<comment>
tfilter.h
</comment>


void tfilter_date(const char_t *src, char_t *dest, const uint32_t size, const char_t *pattern, const uint32_t cpos, const bool_t deleted, uint32_t *ncpos)
Date tfilter_to_date(const char_t *text, const char_t *pattern)

<comment>
strings.h
</comment>

<comment>
const char_t *tc(const String *str)
char_t *tcc(String *str)
String *str_c(const char_t *str)
String *str_cn(const char_t *str, const uint32_t n)
String *str_trim(const char_t *str)
String *str_trim_n(const char_t *str, const uint32_t n)
String *str_copy(const String *str)
String *str_printf(const char_t *format, ...) __PRINTF(1, 2)
String *str_path(const platform_t platform, const char_t *format, ...) __PRINTF(2, 3)
String *str_cpath(const char_t *format, ...) __PRINTF(1, 2)
String *str_relpath(const platform_t platform, const char_t *path1, const char_t *path2)
String *str_crelpath(const char_t *path1, const char_t *path2)
String *str_repl(const char_t *str, ...)
String *str_reserve(const uint32_t n)
String *str_fill(const uint32_t n, const char_t c)
String *str_read(Stream *stream)
void str_write(Stream *stream, const String *str)
void str_writef(Stream *stream, const String *str)
void str_upd(String **str, const char_t *new_str)
void str_destroy(String **str)
void str_destopt(String **str)
uint32_t str_len(const String *str)
uint32_t str_len_c(const char_t *str)
uint32_t str_nchars(const String *str)
uint32_t str_prefix(const char_t *str1, const char_t *str2)
bool_t str_is_prefix(const char_t *str, const char_t *prefix)
bool_t str_is_sufix(const char_t *str, const char_t *sufix)
int str_scmp(const String *str1, const String *str2)
int str_cmp(const String *str1, const char_t *str2)
bool_t str_empty(const String *str)
bool_t str_equ(const String *str1, const char_t *str2)
void str_upper(String *str)
void str_lower(String *str)
bool_t str_split(const char_t *str, const char_t *substr, String **left, String **right)
bool_t str_split_trim(const char_t *str, const char_t *substr, String **left, String **right)
ArrPt(String) *str_splits(const char_t *str, const char_t *substr, const bool_t trim, const bool_t add_empty)
void str_split_pathname(const char_t *pathname, String **path, String **file)
void str_split_pathext(const char_t *pathname, String **path, String **file, String **ext)
uint32_t str_find(const ArrPt(String) *array, const char_t *str)
void str_subs(String *str, const char_t replace, const char_t with)
</comment>

void str_copy_c(char_t *dest, const uint32_t size, const char_t *src)
void str_copy_cn(char_t *dest, const uint32_t size, const char_t *src, const uint32_t n)
void str_cat(String **dest, const char_t *src)
void str_cat_c(char_t *dest, const uint32_t size, const char_t *src)

int str_cmp_c(const char_t *str1, const char_t *str2)
int str_cmp_cn(const char_t *str1, const char_t *str2, const uint32_t n)
bool_t str_empty_c(const char_t *str)

bool_t str_equ_c(const char_t *str1, const char_t *str2)
bool_t str_equ_cn(const char_t *str1, const char_t *str2, const uint32_t n)
bool_t str_equ_nocase(const char_t *str1, const char_t *str2)
bool_t str_equ_end(const char_t *str, const char_t *end)


void str_upper_c(char_t *dest, const uint32_t size, const char_t *str)
void str_lower_c(char_t *dest, const uint32_t size, const char_t *str)
void str_repl_c(char_t *str, const char_t *replace, const char_t *with)
const char_t *str_str(const char_t *str, const char_t *substr)

const char_t *str_filename(const char_t *pathname)
const char_t *str_filext(const char_t *pathname)
int8_t str_to_i8(const char_t *str, const uint32_t base, bool_t *error)
int16_t str_to_i16(const char_t *str, const uint32_t base, bool_t *error)
int32_t str_to_i32(const char_t *str, const uint32_t base, bool_t *error)
int64_t str_to_i64(const char_t *str, const uint32_t base, bool_t *error)
uint8_t str_to_u8(const char_t *str, const uint32_t base, bool_t *error)
uint16_t str_to_u16(const char_t *str, const uint32_t base, bool_t *error)
uint32_t str_to_u32(const char_t *str, const uint32_t base, bool_t *error)
uint64_t str_to_u64(const char_t *str, const uint32_t base, bool_t *error)
real32_t str_to_r32(const char_t *str, bool_t *error)
real64_t str_to_r64(const char_t *str, bool_t *error)

<comment>
stream.h
</comment>

Stream *stm_from_block(const byte_t *data, const uint32_t size)
Stream *stm_memory(const uint32_t size)
Stream *stm_from_file(const char_t *pathname, ferror_t *error)
Stream *stm_to_file(const char_t *pathname, ferror_t *error)
Stream *stm_append_file(const char_t *pathname, ferror_t *error)
Stream *stm_socket(Socket *socket)
void stm_close(Stream **stm)
endian_t stm_get_write_endian(const Stream *stm)
endian_t stm_get_read_endian(const Stream *stm)
void stm_set_write_endian(Stream *stm, const endian_t endian)
void stm_set_read_endian(Stream *stm, const endian_t endian)
unicode_t stm_get_write_utf(const Stream *stm)
unicode_t stm_get_read_utf(const Stream *stm)
void stm_set_write_utf(Stream *stm, const unicode_t format)
void stm_set_read_utf(Stream *stm, const unicode_t format)
bool_t stm_is_memory(const Stream *stm)
uint64_t stm_bytes_written(const Stream *stm)
uint64_t stm_bytes_readed(const Stream *stm)
uint32_t stm_col(const Stream *stm)
uint32_t stm_row(const Stream *stm)
uint32_t stm_token_col(const Stream *stm)
uint32_t stm_token_row(const Stream *stm)
const char_t *stm_token_lexeme(const Stream *stm, uint32_t *size)
void stm_token_escapes(Stream *stm, const bool_t active_escapes)
void stm_token_spaces(Stream *stm, const bool_t active_spaces)
void stm_token_comments(Stream *stm, const bool_t active_comments)
sstate_t stm_state(const Stream *stm)
ferror_t stm_file_err(const Stream *stm)
serror_t stm_sock_err(const Stream *stm)
void stm_corrupt(Stream *stm)
String *stm_str(const Stream *stm)
const byte_t *stm_buffer(const Stream *stm)
uint32_t stm_buffer_size(const Stream *stm)
void stm_write(Stream *stm, const byte_t *data, const uint32_t size)
void stm_write_char(Stream *stm, const uint32_t codepoint)
<comment>
uint32_t stm_printf(Stream *stm, const char_t *format, ...) __PRINTF(2, 3)
</comment>
uint32_t stm_writef(Stream *stm, const char_t *str)
void stm_write_bool(Stream *stm, const bool_t value)
void stm_write_i8(Stream *stm, const int8_t value)
void stm_write_i16(Stream *stm, const int16_t value)
void stm_write_i32(Stream *stm, const int32_t value)
void stm_write_i64(Stream *stm, const int64_t value)
void stm_write_u8(Stream *stm, const uint8_t value)
void stm_write_u16(Stream *stm, const uint16_t value)
void stm_write_u32(Stream *stm, const uint32_t value)
void stm_write_u64(Stream *stm, const uint64_t value)
void stm_write_r32(Stream *stm, const real32_t value)
void stm_write_r64(Stream *stm, const real64_t value)
uint32_t stm_read(Stream *stm, byte_t *data, const uint32_t size)
uint32_t stm_read_char(Stream *stm)
const char_t *stm_read_chars(Stream *stm, const uint32_t n)
const char_t *stm_read_line(Stream *stm)
const char_t *stm_read_trim(Stream *stm)
ltoken_t stm_read_token(Stream *stm)
int8_t stm_read_i8_tok(Stream *stm)
int16_t stm_read_i16_tok(Stream *stm)
int32_t stm_read_i32_tok(Stream *stm)
int64_t stm_read_i64_tok(Stream *stm)
uint8_t stm_read_u8_tok(Stream *stm)
uint16_t stm_read_u16_tok(Stream *stm)
uint32_t stm_read_u32_tok(Stream *stm)
uint64_t stm_read_u64_tok(Stream *stm)
real32_t stm_read_r32_tok(Stream *stm)
real64_t stm_read_r64_tok(Stream *stm)
bool_t stm_read_bool(Stream *stm)
int8_t stm_read_i8(Stream *stm)
int16_t stm_read_i16(Stream *stm)
int32_t stm_read_i32(Stream *stm)
int64_t stm_read_i64(Stream *stm)
uint8_t stm_read_u8(Stream *stm)
uint16_t stm_read_u16(Stream *stm)
uint32_t stm_read_u32(Stream *stm)
uint64_t stm_read_u64(Stream *stm)
real32_t stm_read_r32(Stream *stm)
real64_t stm_read_r64(Stream *stm)
void stm_skip(Stream *stm, const uint32_t size)
void stm_skip_bom(Stream *stm)
void stm_skip_token(Stream *stm, const ltoken_t token)
void stm_flush(Stream *stm)
void stm_pipe(Stream *from, Stream *to, const uint32_t n)

<comment>
respack.h
</comment>

void respack_destroy(ResPack **pack)
const char_t *respack_text(const ResPack *pack, const ResId id)
const byte_t *respack_file(const ResPack *pack, const ResId id, uint32_t *size)

<comment>
regex.h
</comment>

RegEx *regex_create(const char_t *pattern)
void regex_destroy(RegEx **regex)
bool_t regex_match(const RegEx *regex, const char_t *str)


<comment>
rbtree.h
</comment>


RBTree *rbtree_create(FPtr_compare func_compare, const uint16_t esize, const uint16_t ksize, const char_t *type)
void rbtree_destroy(RBTree **tree, FPtr_remove func_remove, FPtr_destroy func_destroy_key, const char_t *type)
void rbtree_destroy_ptr(RBTree **tree, FPtr_destroy func_destroy, FPtr_destroy func_destroy_key, const char_t *type)
uint32_t rbtree_size(const RBTree *tree)
byte_t *rbtree_get(const RBTree *tree, const void *key, const bool_t isptr)
byte_t *rbtree_insert(RBTree *tree, const void *key, FPtr_copy func_key_copy)
bool_t rbtree_insert_ptr(RBTree *tree, void *ptr)
bool_t rbtree_delete(RBTree *tree, const void *key, FPtr_remove func_remove, FPtr_destroy func_destroy_key)
bool_t rbtree_delete_ptr(RBTree *tree, const void *key, FPtr_destroy func_destroy, FPtr_destroy func_destroy_key)
byte_t *rbtree_first(RBTree *tree)
byte_t *rbtree_last(RBTree *tree)
byte_t *rbtree_next(RBTree *tree)
byte_t *rbtree_prev(RBTree *tree)
byte_t *rbtree_first_ptr(RBTree *tree)
byte_t *rbtree_last_ptr(RBTree *tree)
byte_t *rbtree_next_ptr(RBTree *tree)
byte_t *rbtree_prev_ptr(RBTree *tree)
const char_t *rbtree_get_key(const RBTree *tree)
bool_t rbtree_check(const RBTree *tree)

<comment>
objh.h
</comment>


void obj_init(Object *object)
byte_t *obj_new_imp(const uint32_t size, const char_t *type)
byte_t *obj_new0_imp(const uint32_t size, const char_t *type)
void *obj_retain_imp(const void *object)
void *obj_retain_optional_imp(const void *object)
void obj_remove(Object *object)
void obj_release_imp(void **object)
void obj_release_optional_imp(void **object)
void obj_delete_imp(byte_t **object, const uint32_t size, const char_t *type)
Listener *obj_listener_imp(void *object, FPtr_event_handler func_event_handler)

<comment>
keybuf.h
</comment>


KeyBuf *keybuf_create(void)
void keybuf_destroy(KeyBuf **buffer)
void keybuf_OnUp(KeyBuf *buffer, const vkey_t key)
void keybuf_OnDown(KeyBuf *buffer, const vkey_t key)
void keybuf_clear(KeyBuf *buffer)
bool_t keybuf_pressed(const KeyBuf *buffer, const vkey_t key)
const char_t *keybuf_str(const vkey_t key)
void keybuf_dump(const KeyBuf *buffer)

<comment>
hfileh.h
</comment>

String *hfile_exename(void)

<comment>
hfile.h
</comment>


bool_t hfile_dir(const char_t *pathname)
bool_t hfile_dir_create(const char_t *pathname, ferror_t *error)
bool_t hfile_dir_destroy(const char_t *pathname, ferror_t *error)
<comment>
ArrSt(DirEntry) *hfile_dir_list(const char_t *pathname, const bool_t subdirs, ferror_t *error)
</comment>
void hfile_dir_entry_remove(DirEntry *entry)
Date hfile_date(const char_t *pathname, const bool_t recursive)
bool_t hfile_dir_sync(const char_t *src, const char_t *dest, const bool_t recursive, const bool_t remove_in_dest, const char_t **except, const uint32_t except_size, ferror_t *error)
bool_t hfile_exists(const char_t *pathname, file_type_t *file_type)
bool_t hfile_is_uptodate(const char_t *src, const char_t *dest)
bool_t hfile_copy(const char_t *from, const char_t *to, ferror_t *error)
Buffer *hfile_buffer(const char_t *pathname, ferror_t *error)
String *hfile_string(const char_t *pathname, ferror_t *error)
Stream *hfile_stream(const char_t *pathname, ferror_t *error)
bool_t hfile_from_string(const char_t *pathname, const String *str, ferror_t *error)
bool_t hfile_from_data(const char_t *pathname, const byte_t *data, const uint32_t size, ferror_t *error)
bool_t hfile_dir_loop(const char_t *pathname, Listener *listener, const bool_t subdirs, const bool_t hiddens, ferror_t *error)
String *hfile_appdata(const char_t *filename)
String *hfile_home_dir(const char_t *path)

<comment>
heap.h
</comment>


void heap_start_mt(void)
void heap_end_mt(void)
void heap_verbose(const bool_t verbose)
void heap_stats(const bool_t stats)
bool_t heap_leaks(void)
byte_t *heap_malloc_imp(const uint32_t size, const char_t *name, const bool_t equal_sized)
byte_t *heap_calloc_imp(const uint32_t size, const char_t *name, const bool_t equal_sized)
byte_t *heap_realloc(byte_t *mem, const uint32_t size, const uint32_t new_size, const char_t *name)
byte_t *heap_aligned_malloc_imp(const uint32_t size, const uint32_t align, const char_t *name, const bool_t equal_sized)
byte_t *heap_aligned_calloc_imp(const uint32_t size, const uint32_t align, const char_t *name, const bool_t equal_sized)
byte_t *heap_aligned_realloc(byte_t *mem, const uint32_t size, const uint32_t new_size, const uint32_t align, const char_t *name)
void heap_free(byte_t **mem, const uint32_t size, const char_t *name)
void heap_auditor_add(const char_t *name)
void heap_auditor_delete(const char_t *name)

<comment>
event.h
</comment>


Listener *listener_imp(void *object, FPtr_event_handler func_event_handler)
void listener_destroy(Listener **listener)
void listener_update(Listener **listener, Listener *new_listener)
void listener_event_imp(Listener *listener, const uint32_t type, void *sender, void *params, void *result, const char_t *sender_type, const char_t *params_type, const char_t *result_type)
void listener_pass_event_imp(Listener *listener, Event *event, void *sender, const char_t *sender_type)
uint32_t event_type(const Event *event)
void *event_sender_imp(Event *event, const char_t *type)
void *event_params_imp(Event *event, const char_t *type)
void *event_result_imp(Event *event, const char_t *type)

<comment>
dbind.h
</comment>


void dbind_imp(const char_t *type, const uint16_t size, const char_t *mname, const char_t *mtype, const uint16_t moffset, const uint16_t msize)
void dbind_enum_imp(const char_t *type, const char_t *name, const enum_t value, const char_t *alias)
byte_t *dbind_create_imp(const char_t *type)
void dbind_init_imp(byte_t *data, const char_t *type)
void dbind_remove_imp(byte_t *data, const char_t *type)
void dbind_destroy_imp(byte_t **data, const char_t *type)
void dbind_destopt_imp(byte_t **data, const char_t *type)
void *dbind_read_imp(Stream *stm, const char_t *type)
void dbind_write_imp(Stream *stm, const void *data, const char_t *type)
void dbind_default_imp(const char_t *type, const char_t *mname, const void *value)
void dbind_range_imp(const char_t *type, const char_t *mname, const void *min, const void *max)
void dbind_precision_imp(const char_t *type, const char_t *mname, const void *prec)
void dbind_increment_imp(const char_t *type, const char_t *mname, const void *incr)
void dbind_suffix_imp(const char_t *type, const char_t *mname, const char_t *suffix)

<comment>
date.h
</comment>


Date date_system(void)
Date date_pack(const int16_t year, const uint8_t month, const uint8_t mday, const uint8_t hour, const uint8_t minute, const uint8_t second)
Date date_add_seconds(const Date *date, int32_t seconds)
Date date_add_minutes(const Date *date, int32_t minutes)
Date date_add_hours(const Date *date, int32_t hours)
Date date_add_days(const Date *date, int32_t days)
int16_t date_year(void)
int date_cmp(const Date *date1, const Date *date2)
int64_t date_ellapsed_seconds(const Date *from, const Date *to)
bool_t date_between(const Date *date, const Date *from, const Date *to)
bool_t date_is_null(const Date *date)
bool_t date_is_valid(const Date *date)
week_day_t date_weekday(const Date *date)
String *date_format(const Date *date, const char_t *format)

<comment>
core.h
</comment>


void core_start(void)
void core_finish(void)

<comment>
clock.h
</comment>


Clock *clock_create(const real64_t interval)
void clock_destroy(Clock **clk)
bool_t clock_frame(Clock *clk, real64_t *prev_frame, real64_t *curr_frame)
void clock_reset(Clock *clk)
real64_t clock_elapsed(const Clock *clk)

<comment>
buffer.h
</comment>


Buffer *buffer_create(const uint32_t size)
Buffer *buffer_with_data(const byte_t *data, const uint32_t size)
void buffer_destroy(Buffer **buffer)
uint32_t buffer_size(const Buffer *buffer)
byte_t *buffer_data(Buffer *buffer)
const byte_t *buffer_const(const Buffer *buffer)

<comment>
bhash.h
</comment>


uint32_t bhash_from_block(const byte_t *data, const uint32_t size)
uint32_t bhash_append_uint32(const uint32_t hash, const uint32_t value)
uint32_t bhash_append_real32(const uint32_t hash, const real32_t value)

<comment>
array.h
</comment>


Array *array_create(const uint16_t esize, const char_t *type)
Array *array_copy(const Array *array, FPtr_scopy func_copy, const char_t *type)
Array *array_copy_ptr(const Array *array, FPtr_copy func_copy, const char_t *type)
Array *array_read(Stream *stream, const uint16_t esize, FPtr_read_init func_read_init, const char_t *type)
Array *array_read_ptr(Stream *stream, FPtr_read func_read, const char_t *type)
void array_destroy(Array **array, FPtr_remove func_remove, const char_t *type)
void array_destopt(Array **array, FPtr_remove func_remove, const char_t *type)
void array_destroy_ptr(Array **array, FPtr_destroy func_destroy, const char_t *type)
void array_destopt_ptr(Array **array, FPtr_destroy func_destroy, const char_t *type)
void array_clear(Array *array, FPtr_remove func_remove)
void array_clear_ptr(Array *array, FPtr_destroy func_destroy)
void array_write(Stream *stream, const Array *array, FPtr_write func_write)
void array_write_ptr(Stream *stream, const Array *array, FPtr_write func_write)
uint32_t array_size(const Array *array)
uint32_t array_esize(const Array *array)
byte_t *array_get(const Array *array, const uint32_t pos)
byte_t *array_get_last(const Array *array)
byte_t *array_all(const Array *array)
byte_t *array_insert(Array *array, const uint32_t pos, const uint32_t n)
byte_t *array_insert0(Array *array, const uint32_t pos, const uint32_t n)
void array_join(Array *dest, const Array *src, FPtr_scopy func_copy)
void array_join_ptr(Array *dest, const Array *src, FPtr_copy func_copy)
void array_delete(Array *array, const uint32_t pos, const uint32_t n, FPtr_remove func_remove)
void array_delete_ptr(Array *array, const uint32_t pos, const uint32_t n, FPtr_destroy func_destroy)
void array_pop(Array *array, FPtr_remove func_remove)
void array_pop_ptr(Array *array, FPtr_destroy func_destroy)
void array_sort(Array *array, FPtr_compare func_compare)
void array_sort_ex(Array *array, FPtr_compare_ex func_compare, void *data)
void array_sort_ptr(Array *array, FPtr_compare func_compare)
void array_sort_ptr_ex(Array *array, FPtr_compare_ex func_compare, void *data)
uint32_t array_find_ptr(const Array *array, const void *elem)
byte_t *array_search(const Array *array, FPtr_compare func_compare, const void *key, uint32_t *pos)
byte_t *array_search_ptr(const Array *array, FPtr_compare func_compare, const void *key, uint32_t *pos)
byte_t *array_bsearch(const Array *array, FPtr_compare func_compare, const void *key, uint32_t *pos)
byte_t *array_bsearch_ptr(const Array *array, FPtr_compare func_compare, const void *key, uint32_t *pos)
